'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DstmpSalesorder"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DstmpSalesorder
    Inherits Global.System.Data.DataSet
    
    Private tabletmptbl_SalesOrderHeaderforSGM As tmptbl_SalesOrderHeaderforSGMDataTable
    
    Private tabletmptbl_SalesOrderDetailforSGM As tmptbl_SalesOrderDetailforSGMDataTable
    
    Private relationtmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tmptbl_SalesOrderHeaderforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_SalesOrderHeaderforSGMDataTable(ds.Tables("tmptbl_SalesOrderHeaderforSGM")))
            End If
            If (Not (ds.Tables("tmptbl_SalesOrderDetailforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_SalesOrderDetailforSGMDataTable(ds.Tables("tmptbl_SalesOrderDetailforSGM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmptbl_SalesOrderHeaderforSGM() As tmptbl_SalesOrderHeaderforSGMDataTable
        Get
            Return Me.tabletmptbl_SalesOrderHeaderforSGM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmptbl_SalesOrderDetailforSGM() As tmptbl_SalesOrderDetailforSGMDataTable
        Get
            Return Me.tabletmptbl_SalesOrderDetailforSGM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DstmpSalesorder = CType(MyBase.Clone,DstmpSalesorder)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tmptbl_SalesOrderHeaderforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_SalesOrderHeaderforSGMDataTable(ds.Tables("tmptbl_SalesOrderHeaderforSGM")))
            End If
            If (Not (ds.Tables("tmptbl_SalesOrderDetailforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_SalesOrderDetailforSGMDataTable(ds.Tables("tmptbl_SalesOrderDetailforSGM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletmptbl_SalesOrderHeaderforSGM = CType(MyBase.Tables("tmptbl_SalesOrderHeaderforSGM"),tmptbl_SalesOrderHeaderforSGMDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmptbl_SalesOrderHeaderforSGM) Is Nothing) Then
                Me.tabletmptbl_SalesOrderHeaderforSGM.InitVars
            End If
        End If
        Me.tabletmptbl_SalesOrderDetailforSGM = CType(MyBase.Tables("tmptbl_SalesOrderDetailforSGM"),tmptbl_SalesOrderDetailforSGMDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmptbl_SalesOrderDetailforSGM) Is Nothing) Then
                Me.tabletmptbl_SalesOrderDetailforSGM.InitVars
            End If
        End If
        Me.relationtmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM = Me.Relations("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DstmpSalesorder"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DstmpSalesorder.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletmptbl_SalesOrderHeaderforSGM = New tmptbl_SalesOrderHeaderforSGMDataTable
        MyBase.Tables.Add(Me.tabletmptbl_SalesOrderHeaderforSGM)
        Me.tabletmptbl_SalesOrderDetailforSGM = New tmptbl_SalesOrderDetailforSGMDataTable
        MyBase.Tables.Add(Me.tabletmptbl_SalesOrderDetailforSGM)
        Me.relationtmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM = New Global.System.Data.DataRelation("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM", New Global.System.Data.DataColumn() {Me.tabletmptbl_SalesOrderHeaderforSGM.IDColumn}, New Global.System.Data.DataColumn() {Me.tabletmptbl_SalesOrderDetailforSGM.IDColumn}, false)
        Me.Relations.Add(Me.relationtmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmptbl_SalesOrderHeaderforSGM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmptbl_SalesOrderDetailforSGM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DstmpSalesorder = New DstmpSalesorder
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tmptbl_SalesOrderHeaderforSGMRowChangeEventHandler(ByVal sender As Object, ByVal e As tmptbl_SalesOrderHeaderforSGMRowChangeEvent)
    
    Public Delegate Sub tmptbl_SalesOrderDetailforSGMRowChangeEventHandler(ByVal sender As Object, ByVal e As tmptbl_SalesOrderDetailforSGMRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmptbl_SalesOrderHeaderforSGMDataTable
        Inherits Global.System.Data.TypedTableBase(Of tmptbl_SalesOrderHeaderforSGMRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnOrderRecivedDate As Global.System.Data.DataColumn
        
        Private columnBuyerName As Global.System.Data.DataColumn
        
        Private columnSalesOrderNo As Global.System.Data.DataColumn
        
        Private columnCustomerOrderNo As Global.System.Data.DataColumn
        
        Private columnArticle As Global.System.Data.DataColumn
        
        Private columnArticleName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnMaterialColorDescription As Global.System.Data.DataColumn
        
        Private columnCodificationNew As Global.System.Data.DataColumn
        
        Private columnArticleMould As Global.System.Data.DataColumn
        
        Private columnOrderType As Global.System.Data.DataColumn
        
        Private columnOrderQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnOrderValue As Global.System.Data.DataColumn
        
        Private columnDispQty As Global.System.Data.DataColumn
        
        Private columnBal2disp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmptbl_SalesOrderHeaderforSGM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderRecivedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderRecivedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BuyerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuyerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColorDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialColorDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodificationNewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodificationNew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleMouldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticleMould
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bal2dispColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBal2disp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmptbl_SalesOrderHeaderforSGMRow
            Get
                Return CType(Me.Rows(index),tmptbl_SalesOrderHeaderforSGMRow)
            End Get
        End Property
        
        Public Event tmptbl_SalesOrderHeaderforSGMRowChanging As tmptbl_SalesOrderHeaderforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderHeaderforSGMRowChanged As tmptbl_SalesOrderHeaderforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderHeaderforSGMRowDeleting As tmptbl_SalesOrderHeaderforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderHeaderforSGMRowDeleted As tmptbl_SalesOrderHeaderforSGMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtmptbl_SalesOrderHeaderforSGMRow(ByVal row As tmptbl_SalesOrderHeaderforSGMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtmptbl_SalesOrderHeaderforSGMRow( _
                    ByVal ID As String,  _
                    ByVal OrderRecivedDate As Date,  _
                    ByVal BuyerName As String,  _
                    ByVal SalesOrderNo As String,  _
                    ByVal CustomerOrderNo As String,  _
                    ByVal Article As String,  _
                    ByVal ArticleName As String,  _
                    ByVal Description As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal CodificationNew As String,  _
                    ByVal ArticleMould As String,  _
                    ByVal OrderType As String,  _
                    ByVal OrderQuantity As Integer,  _
                    ByVal Price As Decimal,  _
                    ByVal OrderValue As Decimal,  _
                    ByVal DispQty As Integer,  _
                    ByVal Bal2disp As Integer) As tmptbl_SalesOrderHeaderforSGMRow
            Dim rowtmptbl_SalesOrderHeaderforSGMRow As tmptbl_SalesOrderHeaderforSGMRow = CType(Me.NewRow,tmptbl_SalesOrderHeaderforSGMRow)
            Dim columnValuesArray() As Object = New Object() {ID, OrderRecivedDate, BuyerName, SalesOrderNo, CustomerOrderNo, Article, ArticleName, Description, MaterialColorDescription, CodificationNew, ArticleMould, OrderType, OrderQuantity, Price, OrderValue, DispQty, Bal2disp}
            rowtmptbl_SalesOrderHeaderforSGMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtmptbl_SalesOrderHeaderforSGMRow)
            Return rowtmptbl_SalesOrderHeaderforSGMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tmptbl_SalesOrderHeaderforSGMDataTable = CType(MyBase.Clone,tmptbl_SalesOrderHeaderforSGMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tmptbl_SalesOrderHeaderforSGMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnOrderRecivedDate = MyBase.Columns("OrderRecivedDate")
            Me.columnBuyerName = MyBase.Columns("BuyerName")
            Me.columnSalesOrderNo = MyBase.Columns("SalesOrderNo")
            Me.columnCustomerOrderNo = MyBase.Columns("CustomerOrderNo")
            Me.columnArticle = MyBase.Columns("Article")
            Me.columnArticleName = MyBase.Columns("ArticleName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnMaterialColorDescription = MyBase.Columns("MaterialColorDescription")
            Me.columnCodificationNew = MyBase.Columns("CodificationNew")
            Me.columnArticleMould = MyBase.Columns("ArticleMould")
            Me.columnOrderType = MyBase.Columns("OrderType")
            Me.columnOrderQuantity = MyBase.Columns("OrderQuantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnOrderValue = MyBase.Columns("OrderValue")
            Me.columnDispQty = MyBase.Columns("DispQty")
            Me.columnBal2disp = MyBase.Columns("Bal2disp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnOrderRecivedDate = New Global.System.Data.DataColumn("OrderRecivedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderRecivedDate)
            Me.columnBuyerName = New Global.System.Data.DataColumn("BuyerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuyerName)
            Me.columnSalesOrderNo = New Global.System.Data.DataColumn("SalesOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesOrderNo)
            Me.columnCustomerOrderNo = New Global.System.Data.DataColumn("CustomerOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerOrderNo)
            Me.columnArticle = New Global.System.Data.DataColumn("Article", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticle)
            Me.columnArticleName = New Global.System.Data.DataColumn("ArticleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticleName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnMaterialColorDescription = New Global.System.Data.DataColumn("MaterialColorDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialColorDescription)
            Me.columnCodificationNew = New Global.System.Data.DataColumn("CodificationNew", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodificationNew)
            Me.columnArticleMould = New Global.System.Data.DataColumn("ArticleMould", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticleMould)
            Me.columnOrderType = New Global.System.Data.DataColumn("OrderType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderType)
            Me.columnOrderQuantity = New Global.System.Data.DataColumn("OrderQuantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnOrderValue = New Global.System.Data.DataColumn("OrderValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderValue)
            Me.columnDispQty = New Global.System.Data.DataColumn("DispQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispQty)
            Me.columnBal2disp = New Global.System.Data.DataColumn("Bal2disp", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBal2disp)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 50
            Me.columnBuyerName.MaxLength = 100
            Me.columnSalesOrderNo.MaxLength = 50
            Me.columnCustomerOrderNo.MaxLength = 50
            Me.columnArticle.MaxLength = 50
            Me.columnArticleName.MaxLength = 100
            Me.columnDescription.MaxLength = 150
            Me.columnMaterialColorDescription.MaxLength = 50
            Me.columnCodificationNew.MaxLength = 50
            Me.columnArticleMould.MaxLength = 50
            Me.columnOrderType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtmptbl_SalesOrderHeaderforSGMRow() As tmptbl_SalesOrderHeaderforSGMRow
            Return CType(Me.NewRow,tmptbl_SalesOrderHeaderforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tmptbl_SalesOrderHeaderforSGMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tmptbl_SalesOrderHeaderforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmptbl_SalesOrderHeaderforSGMRowChangedEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderHeaderforSGMRowChanged(Me, New tmptbl_SalesOrderHeaderforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderHeaderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmptbl_SalesOrderHeaderforSGMRowChangingEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderHeaderforSGMRowChanging(Me, New tmptbl_SalesOrderHeaderforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderHeaderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmptbl_SalesOrderHeaderforSGMRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderHeaderforSGMRowDeleted(Me, New tmptbl_SalesOrderHeaderforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderHeaderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmptbl_SalesOrderHeaderforSGMRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderHeaderforSGMRowDeleting(Me, New tmptbl_SalesOrderHeaderforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderHeaderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetmptbl_SalesOrderHeaderforSGMRow(ByVal row As tmptbl_SalesOrderHeaderforSGMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DstmpSalesorder = New DstmpSalesorder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmptbl_SalesOrderHeaderforSGMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmptbl_SalesOrderDetailforSGMDataTable
        Inherits Global.System.Data.TypedTableBase(Of tmptbl_SalesOrderDetailforSGMRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnInvoiceDate As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnSalesOrderNo As Global.System.Data.DataColumn
        
        Private columnCustomerOrderNo As Global.System.Data.DataColumn
        
        Private columnArticle As Global.System.Data.DataColumn
        
        Private columnArticleName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnMaterialColorDescription As Global.System.Data.DataColumn
        
        Private columnCodificationNew As Global.System.Data.DataColumn
        
        Private columnArticleMould As Global.System.Data.DataColumn
        
        Private columnOrderType As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnOrderQty As Global.System.Data.DataColumn
        
        Private columnInvQty As Global.System.Data.DataColumn
        
        Private columnOrderValue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmptbl_SalesOrderDetailforSGM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColorDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialColorDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodificationNewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodificationNew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArticleMouldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArticleMould
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmptbl_SalesOrderDetailforSGMRow
            Get
                Return CType(Me.Rows(index),tmptbl_SalesOrderDetailforSGMRow)
            End Get
        End Property
        
        Public Event tmptbl_SalesOrderDetailforSGMRowChanging As tmptbl_SalesOrderDetailforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderDetailforSGMRowChanged As tmptbl_SalesOrderDetailforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderDetailforSGMRowDeleting As tmptbl_SalesOrderDetailforSGMRowChangeEventHandler
        
        Public Event tmptbl_SalesOrderDetailforSGMRowDeleted As tmptbl_SalesOrderDetailforSGMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtmptbl_SalesOrderDetailforSGMRow(ByVal row As tmptbl_SalesOrderDetailforSGMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtmptbl_SalesOrderDetailforSGMRow( _
                    ByVal parenttmptbl_SalesOrderHeaderforSGMRowBytmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM As tmptbl_SalesOrderHeaderforSGMRow,  _
                    ByVal InvoiceDate As Date,  _
                    ByVal InvoiceNo As String,  _
                    ByVal SalesOrderNo As String,  _
                    ByVal CustomerOrderNo As String,  _
                    ByVal Article As String,  _
                    ByVal ArticleName As String,  _
                    ByVal Description As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal CodificationNew As String,  _
                    ByVal ArticleMould As String,  _
                    ByVal OrderType As String,  _
                    ByVal Price As Integer,  _
                    ByVal OrderQty As Decimal,  _
                    ByVal InvQty As Decimal,  _
                    ByVal OrderValue As Integer) As tmptbl_SalesOrderDetailforSGMRow
            Dim rowtmptbl_SalesOrderDetailforSGMRow As tmptbl_SalesOrderDetailforSGMRow = CType(Me.NewRow,tmptbl_SalesOrderDetailforSGMRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, InvoiceDate, InvoiceNo, SalesOrderNo, CustomerOrderNo, Article, ArticleName, Description, MaterialColorDescription, CodificationNew, ArticleMould, OrderType, Price, OrderQty, InvQty, OrderValue}
            If (Not (parenttmptbl_SalesOrderHeaderforSGMRowBytmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM) Is Nothing) Then
                columnValuesArray(0) = parenttmptbl_SalesOrderHeaderforSGMRowBytmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM(0)
            End If
            rowtmptbl_SalesOrderDetailforSGMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtmptbl_SalesOrderDetailforSGMRow)
            Return rowtmptbl_SalesOrderDetailforSGMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tmptbl_SalesOrderDetailforSGMDataTable = CType(MyBase.Clone,tmptbl_SalesOrderDetailforSGMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tmptbl_SalesOrderDetailforSGMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnInvoiceDate = MyBase.Columns("InvoiceDate")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnSalesOrderNo = MyBase.Columns("SalesOrderNo")
            Me.columnCustomerOrderNo = MyBase.Columns("CustomerOrderNo")
            Me.columnArticle = MyBase.Columns("Article")
            Me.columnArticleName = MyBase.Columns("ArticleName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnMaterialColorDescription = MyBase.Columns("MaterialColorDescription")
            Me.columnCodificationNew = MyBase.Columns("CodificationNew")
            Me.columnArticleMould = MyBase.Columns("ArticleMould")
            Me.columnOrderType = MyBase.Columns("OrderType")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnOrderQty = MyBase.Columns("OrderQty")
            Me.columnInvQty = MyBase.Columns("InvQty")
            Me.columnOrderValue = MyBase.Columns("OrderValue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnInvoiceDate = New Global.System.Data.DataColumn("InvoiceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceDate)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnSalesOrderNo = New Global.System.Data.DataColumn("SalesOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesOrderNo)
            Me.columnCustomerOrderNo = New Global.System.Data.DataColumn("CustomerOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerOrderNo)
            Me.columnArticle = New Global.System.Data.DataColumn("Article", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticle)
            Me.columnArticleName = New Global.System.Data.DataColumn("ArticleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticleName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnMaterialColorDescription = New Global.System.Data.DataColumn("MaterialColorDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialColorDescription)
            Me.columnCodificationNew = New Global.System.Data.DataColumn("CodificationNew", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodificationNew)
            Me.columnArticleMould = New Global.System.Data.DataColumn("ArticleMould", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArticleMould)
            Me.columnOrderType = New Global.System.Data.DataColumn("OrderType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderType)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnOrderQty = New Global.System.Data.DataColumn("OrderQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderQty)
            Me.columnInvQty = New Global.System.Data.DataColumn("InvQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvQty)
            Me.columnOrderValue = New Global.System.Data.DataColumn("OrderValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderValue)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 50
            Me.columnInvoiceNo.MaxLength = 100
            Me.columnSalesOrderNo.MaxLength = 50
            Me.columnCustomerOrderNo.MaxLength = 50
            Me.columnArticle.MaxLength = 50
            Me.columnArticleName.MaxLength = 100
            Me.columnDescription.MaxLength = 150
            Me.columnMaterialColorDescription.MaxLength = 50
            Me.columnCodificationNew.MaxLength = 50
            Me.columnArticleMould.MaxLength = 50
            Me.columnOrderType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtmptbl_SalesOrderDetailforSGMRow() As tmptbl_SalesOrderDetailforSGMRow
            Return CType(Me.NewRow,tmptbl_SalesOrderDetailforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tmptbl_SalesOrderDetailforSGMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tmptbl_SalesOrderDetailforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmptbl_SalesOrderDetailforSGMRowChangedEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderDetailforSGMRowChanged(Me, New tmptbl_SalesOrderDetailforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderDetailforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmptbl_SalesOrderDetailforSGMRowChangingEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderDetailforSGMRowChanging(Me, New tmptbl_SalesOrderDetailforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderDetailforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmptbl_SalesOrderDetailforSGMRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderDetailforSGMRowDeleted(Me, New tmptbl_SalesOrderDetailforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderDetailforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmptbl_SalesOrderDetailforSGMRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmptbl_SalesOrderDetailforSGMRowDeleting(Me, New tmptbl_SalesOrderDetailforSGMRowChangeEvent(CType(e.Row,tmptbl_SalesOrderDetailforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetmptbl_SalesOrderDetailforSGMRow(ByVal row As tmptbl_SalesOrderDetailforSGMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DstmpSalesorder = New DstmpSalesorder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmptbl_SalesOrderDetailforSGMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmptbl_SalesOrderHeaderforSGMRow
        Inherits Global.System.Data.DataRow
        
        Private tabletmptbl_SalesOrderHeaderforSGM As tmptbl_SalesOrderHeaderforSGMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmptbl_SalesOrderHeaderforSGM = CType(Me.Table,tmptbl_SalesOrderHeaderforSGMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.IDColumn),String)
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderRecivedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderRecivedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderRecivedDate' in table 'tmptbl_SalesOrderHeaderforSGM' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderRecivedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BuyerName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.BuyerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BuyerName' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.BuyerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.SalesOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalesOrderNo' in table 'tmptbl_SalesOrderHeaderforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.SalesOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CustomerOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerOrderNo' in table 'tmptbl_SalesOrderHeaderforSGM' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CustomerOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Article() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Article' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArticleName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArticleName' in table 'tmptbl_SalesOrderHeaderforSGM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tmptbl_SalesOrderHeaderforSGM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialColorDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.MaterialColorDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialColorDescription' in table 'tmptbl_SalesOrderHeader"& _ 
                            "forSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.MaterialColorDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodificationNew() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CodificationNewColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodificationNew' in table 'tmptbl_SalesOrderHeaderforSGM' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CodificationNewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArticleMould() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleMouldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArticleMould' in table 'tmptbl_SalesOrderHeaderforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleMouldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderType' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderQuantity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderQuantityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderQuantity' in table 'tmptbl_SalesOrderHeaderforSGM' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderValue' in table 'tmptbl_SalesOrderHeaderforSGM' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DispQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispQty' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DispQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bal2disp() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderHeaderforSGM.Bal2dispColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bal2disp' in table 'tmptbl_SalesOrderHeaderforSGM' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderHeaderforSGM.Bal2dispColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderRecivedDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderRecivedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderRecivedDateNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderRecivedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBuyerNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.BuyerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBuyerNameNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.BuyerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.SalesOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesOrderNoNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.SalesOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.CustomerOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerOrderNoNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CustomerOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleNameNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialColorDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.MaterialColorDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialColorDescriptionNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.MaterialColorDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodificationNewNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.CodificationNewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodificationNewNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.CodificationNewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleMouldNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleMouldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleMouldNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.ArticleMouldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderTypeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderTypeNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderQuantityNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderValueNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderValueNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.OrderValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispQtyNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.DispQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispQtyNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.DispQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBal2dispNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderHeaderforSGM.Bal2dispColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBal2dispNull()
            Me(Me.tabletmptbl_SalesOrderHeaderforSGM.Bal2dispColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettmptbl_SalesOrderDetailforSGMRows() As tmptbl_SalesOrderDetailforSGMRow()
            If (Me.Table.ChildRelations("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM") Is Nothing) Then
                Return New tmptbl_SalesOrderDetailforSGMRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM")),tmptbl_SalesOrderDetailforSGMRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmptbl_SalesOrderDetailforSGMRow
        Inherits Global.System.Data.DataRow
        
        Private tabletmptbl_SalesOrderDetailforSGM As tmptbl_SalesOrderDetailforSGMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmptbl_SalesOrderDetailforSGM = CType(Me.Table,tmptbl_SalesOrderDetailforSGMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.IDColumn),String)
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceDate' in table 'tmptbl_SalesOrderDetailforSGM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNo' in table 'tmptbl_SalesOrderDetailforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.SalesOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalesOrderNo' in table 'tmptbl_SalesOrderDetailforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.SalesOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.CustomerOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerOrderNo' in table 'tmptbl_SalesOrderDetailforSGM' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.CustomerOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Article() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Article' in table 'tmptbl_SalesOrderDetailforSGM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArticleName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArticleName' in table 'tmptbl_SalesOrderDetailforSGM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tmptbl_SalesOrderDetailforSGM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialColorDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.MaterialColorDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialColorDescription' in table 'tmptbl_SalesOrderDetail"& _ 
                            "forSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.MaterialColorDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodificationNew() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.CodificationNewColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodificationNew' in table 'tmptbl_SalesOrderDetailforSGM' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.CodificationNewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArticleMould() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleMouldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArticleMould' in table 'tmptbl_SalesOrderDetailforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleMouldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderType' in table 'tmptbl_SalesOrderDetailforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.PriceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'tmptbl_SalesOrderDetailforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderQty' in table 'tmptbl_SalesOrderDetailforSGM' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvQty' in table 'tmptbl_SalesOrderDetailforSGM' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderValue() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderValueColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderValue' in table 'tmptbl_SalesOrderDetailforSGM' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tmptbl_SalesOrderHeaderforSGMRow() As tmptbl_SalesOrderHeaderforSGMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM")),tmptbl_SalesOrderHeaderforSGMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tmptbl_SalesOrderHeaderforSGM_tmptbl_SalesOrderDetailforSGM"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceDateNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.SalesOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesOrderNoNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.SalesOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.CustomerOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerOrderNoNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.CustomerOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleNameNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialColorDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.MaterialColorDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialColorDescriptionNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.MaterialColorDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodificationNewNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.CodificationNewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodificationNewNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.CodificationNewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArticleMouldNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleMouldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArticleMouldNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.ArticleMouldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderTypeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.OrderTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderTypeNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderQtyNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.OrderQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderQtyNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvQtyNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.InvQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvQtyNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.InvQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderValueNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_SalesOrderDetailforSGM.OrderValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderValueNull()
            Me(Me.tabletmptbl_SalesOrderDetailforSGM.OrderValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmptbl_SalesOrderHeaderforSGMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tmptbl_SalesOrderHeaderforSGMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmptbl_SalesOrderHeaderforSGMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmptbl_SalesOrderHeaderforSGMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmptbl_SalesOrderDetailforSGMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tmptbl_SalesOrderDetailforSGMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmptbl_SalesOrderDetailforSGMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmptbl_SalesOrderDetailforSGMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DstmpSalesorderTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tmptbl_SalesOrderHeaderforSGMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tmptbl_SalesOrderHeaderforSGM"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("BuyerName", "BuyerName")
            tableMapping.ColumnMappings.Add("SalesOrderNo", "SalesOrderNo")
            tableMapping.ColumnMappings.Add("CustomerOrderNo", "CustomerOrderNo")
            tableMapping.ColumnMappings.Add("Article", "Article")
            tableMapping.ColumnMappings.Add("ArticleName", "ArticleName")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("MaterialColorDescription", "MaterialColorDescription")
            tableMapping.ColumnMappings.Add("CodificationNew", "CodificationNew")
            tableMapping.ColumnMappings.Add("ArticleMould", "ArticleMould")
            tableMapping.ColumnMappings.Add("OrderType", "OrderType")
            tableMapping.ColumnMappings.Add("OrderQuantity", "OrderQuantity")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("OrderValue", "OrderValue")
            tableMapping.ColumnMappings.Add("DispQty", "DispQty")
            tableMapping.ColumnMappings.Add("Bal2disp", "Bal2disp")
            tableMapping.ColumnMappings.Add("OrderRecivedDate", "OrderRecivedDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tmptbl_SalesOrderHeaderforSGM] ([ID], [BuyerName], [SalesOrderNo], ["& _ 
                "CustomerOrderNo], [Article], [ArticleName], [Description], [MaterialColorDescrip"& _ 
                "tion], [CodificationNew], [ArticleMould], [OrderType], [OrderQuantity], [Price],"& _ 
                " [OrderValue], [DispQty], [Bal2disp], [OrderRecivedDate]) VALUES (@ID, @BuyerNam"& _ 
                "e, @SalesOrderNo, @CustomerOrderNo, @Article, @ArticleName, @Description, @Mater"& _ 
                "ialColorDescription, @CodificationNew, @ArticleMould, @OrderType, @OrderQuantity"& _ 
                ", @Price, @OrderValue, @DispQty, @Bal2disp, @OrderRecivedDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BuyerName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BuyerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalesOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalesOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Article", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Article", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArticleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArticleName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialColorDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialColorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodificationNew", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodificationNew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArticleMould", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArticleMould", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderQuantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderQuantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderValue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "OrderValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DispQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DispQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bal2disp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bal2disp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderRecivedDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderRecivedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SolarERPForSGM.My.MySettings.Default.AHGroup
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, BuyerName, SalesOrderNo, CustomerOrderNo, Article, ArticleName,"& _ 
                " Description, MaterialColorDescription, CodificationNew, ArticleMould, OrderType"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         OrderQuantity, Price, OrderValue, DispQty, Bal2disp"& _ 
                ", OrderRecivedDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tmptbl_SalesOrderHeaderforSGM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Orde"& _ 
                "rRecivedDate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DstmpSalesorder.tmptbl_SalesOrderHeaderforSGMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DstmpSalesorder.tmptbl_SalesOrderHeaderforSGMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DstmpSalesorder.tmptbl_SalesOrderHeaderforSGMDataTable = New DstmpSalesorder.tmptbl_SalesOrderHeaderforSGMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DstmpSalesorder.tmptbl_SalesOrderHeaderforSGMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DstmpSalesorder) As Integer
            Return Me.Adapter.Update(dataSet, "tmptbl_SalesOrderHeaderforSGM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As String,  _
                    ByVal BuyerName As String,  _
                    ByVal SalesOrderNo As String,  _
                    ByVal CustomerOrderNo As String,  _
                    ByVal Article As String,  _
                    ByVal ArticleName As String,  _
                    ByVal Description As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal CodificationNew As String,  _
                    ByVal ArticleMould As String,  _
                    ByVal OrderType As String,  _
                    ByVal OrderQuantity As Global.System.Nullable(Of Integer),  _
                    ByVal Price As Global.System.Nullable(Of Decimal),  _
                    ByVal OrderValue As Global.System.Nullable(Of Decimal),  _
                    ByVal DispQty As Global.System.Nullable(Of Integer),  _
                    ByVal Bal2disp As Global.System.Nullable(Of Integer),  _
                    ByVal OrderRecivedDate As String) As Integer
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (BuyerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BuyerName,String)
            End If
            If (SalesOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SalesOrderNo,String)
            End If
            If (CustomerOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CustomerOrderNo,String)
            End If
            If (Article Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Article,String)
            End If
            If (ArticleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ArticleName,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Description,String)
            End If
            If (MaterialColorDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MaterialColorDescription,String)
            End If
            If (CodificationNew Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CodificationNew,String)
            End If
            If (ArticleMould Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ArticleMould,String)
            End If
            If (OrderType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OrderType,String)
            End If
            If (OrderQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(OrderQuantity.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Price.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (OrderValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(OrderValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (DispQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(DispQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Bal2disp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Bal2disp.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (OrderRecivedDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(OrderRecivedDate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tmptbl_SalesOrderDetailforSGMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tmptbl_SalesOrderDetailforSGM"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("InvoiceDate", "InvoiceDate")
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo")
            tableMapping.ColumnMappings.Add("SalesOrderNo", "SalesOrderNo")
            tableMapping.ColumnMappings.Add("CustomerOrderNo", "CustomerOrderNo")
            tableMapping.ColumnMappings.Add("Article", "Article")
            tableMapping.ColumnMappings.Add("ArticleName", "ArticleName")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("MaterialColorDescription", "MaterialColorDescription")
            tableMapping.ColumnMappings.Add("CodificationNew", "CodificationNew")
            tableMapping.ColumnMappings.Add("ArticleMould", "ArticleMould")
            tableMapping.ColumnMappings.Add("OrderType", "OrderType")
            tableMapping.ColumnMappings.Add("OrderQuantity", "Price")
            tableMapping.ColumnMappings.Add("Price", "OrderQty")
            tableMapping.ColumnMappings.Add("OrderValue", "InvQty")
            tableMapping.ColumnMappings.Add("InvoiceQty", "OrderValue")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tmptbl_SalesOrderDetailforSGM] ([ID], [InvoiceDate], [InvoiceNo], [S"& _ 
                "alesOrderNo], [CustomerOrderNo], [Article], [ArticleName], [Description], [Mater"& _ 
                "ialColorDescription], [CodificationNew], [ArticleMould], [OrderType], [OrderQuan"& _ 
                "tity], [Price], [OrderValue], [InvoiceQty]) VALUES (@ID, @InvoiceDate, @InvoiceN"& _ 
                "o, @SalesOrderNo, @CustomerOrderNo, @Article, @ArticleName, @Description, @Mater"& _ 
                "ialColorDescription, @CodificationNew, @ArticleMould, @OrderType, @OrderQuantity"& _ 
                ", @Price, @OrderValue, @InvoiceQty)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalesOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalesOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Article", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Article", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArticleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArticleName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialColorDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialColorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodificationNew", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodificationNew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArticleMould", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArticleMould", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderQuantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderQuantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderValue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "OrderValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SolarERPForSGM.My.MySettings.Default.AHGroup
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, InvoiceDate, InvoiceNo, SalesOrderNo, CustomerOrderNo, Article,"& _ 
                " ArticleName, Description, MaterialColorDescription, CodificationNew, ArticleMou"& _ 
                "ld, OrderType, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         OrderQuantity, Price, OrderValue, Invo"& _ 
                "iceQty"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tmptbl_SalesOrderDetailforSGM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DstmpSalesorder.tmptbl_SalesOrderDetailforSGMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DstmpSalesorder.tmptbl_SalesOrderDetailforSGMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DstmpSalesorder.tmptbl_SalesOrderDetailforSGMDataTable = New DstmpSalesorder.tmptbl_SalesOrderDetailforSGMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DstmpSalesorder.tmptbl_SalesOrderDetailforSGMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DstmpSalesorder) As Integer
            Return Me.Adapter.Update(dataSet, "tmptbl_SalesOrderDetailforSGM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As String,  _
                    ByVal InvoiceDate As Global.System.Nullable(Of Date),  _
                    ByVal InvoiceNo As String,  _
                    ByVal SalesOrderNo As String,  _
                    ByVal CustomerOrderNo As String,  _
                    ByVal Article As String,  _
                    ByVal ArticleName As String,  _
                    ByVal Description As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal CodificationNew As String,  _
                    ByVal ArticleMould As String,  _
                    ByVal OrderType As String,  _
                    ByVal OrderQuantity As Global.System.Nullable(Of Integer),  _
                    ByVal Price As Global.System.Nullable(Of Decimal),  _
                    ByVal OrderValue As Global.System.Nullable(Of Decimal),  _
                    ByVal InvoiceQty As Global.System.Nullable(Of Integer)) As Integer
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (InvoiceDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(InvoiceDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (InvoiceNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(InvoiceNo,String)
            End If
            If (SalesOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SalesOrderNo,String)
            End If
            If (CustomerOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CustomerOrderNo,String)
            End If
            If (Article Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Article,String)
            End If
            If (ArticleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ArticleName,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Description,String)
            End If
            If (MaterialColorDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MaterialColorDescription,String)
            End If
            If (CodificationNew Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CodificationNew,String)
            End If
            If (ArticleMould Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ArticleMould,String)
            End If
            If (OrderType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(OrderType,String)
            End If
            If (OrderQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(OrderQuantity.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Price.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (OrderValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(OrderValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (InvoiceQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(InvoiceQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tmptbl_SalesOrderHeaderforSGMTableAdapter As tmptbl_SalesOrderHeaderforSGMTableAdapter
        
        Private _tmptbl_SalesOrderDetailforSGMTableAdapter As tmptbl_SalesOrderDetailforSGMTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tmptbl_SalesOrderHeaderforSGMTableAdapter() As tmptbl_SalesOrderHeaderforSGMTableAdapter
            Get
                Return Me._tmptbl_SalesOrderHeaderforSGMTableAdapter
            End Get
            Set
                Me._tmptbl_SalesOrderHeaderforSGMTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tmptbl_SalesOrderDetailforSGMTableAdapter() As tmptbl_SalesOrderDetailforSGMTableAdapter
            Get
                Return Me._tmptbl_SalesOrderDetailforSGMTableAdapter
            End Get
            Set
                Me._tmptbl_SalesOrderDetailforSGMTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection
                End If
                If ((Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DstmpSalesorder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderHeaderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderDetailforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DstmpSalesorder, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderHeaderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderDetailforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DstmpSalesorder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderDetailforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tmptbl_SalesOrderHeaderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DstmpSalesorder) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tmptbl_SalesOrderHeaderforSGMTableAdapter, Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection)
                    Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tmptbl_SalesOrderDetailforSGMTableAdapter, Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection)
                    Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tmptbl_SalesOrderHeaderforSGMTableAdapter) Is Nothing) Then
                    Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Connection = CType(revertConnections(Me._tmptbl_SalesOrderHeaderforSGMTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_SalesOrderHeaderforSGMTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tmptbl_SalesOrderDetailforSGMTableAdapter) Is Nothing) Then
                    Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Connection = CType(revertConnections(Me._tmptbl_SalesOrderDetailforSGMTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_SalesOrderDetailforSGMTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
