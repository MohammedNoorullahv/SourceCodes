'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DstmpPurchaseOrder"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DstmpPurchaseOrder
    Inherits Global.System.Data.DataSet
    
    Private tabletmptbl_PurchaseOrderforSGM As tmptbl_PurchaseOrderforSGMDataTable
    
    Private tabletmptbl_PurchaseOrderDetailsforSGM As tmptbl_PurchaseOrderDetailsforSGMDataTable
    
    Private relationtmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tmptbl_PurchaseOrderforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_PurchaseOrderforSGMDataTable(ds.Tables("tmptbl_PurchaseOrderforSGM")))
            End If
            If (Not (ds.Tables("tmptbl_PurchaseOrderDetailsforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_PurchaseOrderDetailsforSGMDataTable(ds.Tables("tmptbl_PurchaseOrderDetailsforSGM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmptbl_PurchaseOrderforSGM() As tmptbl_PurchaseOrderforSGMDataTable
        Get
            Return Me.tabletmptbl_PurchaseOrderforSGM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmptbl_PurchaseOrderDetailsforSGM() As tmptbl_PurchaseOrderDetailsforSGMDataTable
        Get
            Return Me.tabletmptbl_PurchaseOrderDetailsforSGM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DstmpPurchaseOrder = CType(MyBase.Clone,DstmpPurchaseOrder)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tmptbl_PurchaseOrderforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_PurchaseOrderforSGMDataTable(ds.Tables("tmptbl_PurchaseOrderforSGM")))
            End If
            If (Not (ds.Tables("tmptbl_PurchaseOrderDetailsforSGM")) Is Nothing) Then
                MyBase.Tables.Add(New tmptbl_PurchaseOrderDetailsforSGMDataTable(ds.Tables("tmptbl_PurchaseOrderDetailsforSGM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletmptbl_PurchaseOrderforSGM = CType(MyBase.Tables("tmptbl_PurchaseOrderforSGM"),tmptbl_PurchaseOrderforSGMDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmptbl_PurchaseOrderforSGM) Is Nothing) Then
                Me.tabletmptbl_PurchaseOrderforSGM.InitVars
            End If
        End If
        Me.tabletmptbl_PurchaseOrderDetailsforSGM = CType(MyBase.Tables("tmptbl_PurchaseOrderDetailsforSGM"),tmptbl_PurchaseOrderDetailsforSGMDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmptbl_PurchaseOrderDetailsforSGM) Is Nothing) Then
                Me.tabletmptbl_PurchaseOrderDetailsforSGM.InitVars
            End If
        End If
        Me.relationtmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM = Me.Relations("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DstmpPurchaseOrder"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DstmpPurchaseOrder.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletmptbl_PurchaseOrderforSGM = New tmptbl_PurchaseOrderforSGMDataTable
        MyBase.Tables.Add(Me.tabletmptbl_PurchaseOrderforSGM)
        Me.tabletmptbl_PurchaseOrderDetailsforSGM = New tmptbl_PurchaseOrderDetailsforSGMDataTable
        MyBase.Tables.Add(Me.tabletmptbl_PurchaseOrderDetailsforSGM)
        Me.relationtmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM = New Global.System.Data.DataRelation("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM", New Global.System.Data.DataColumn() {Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderNoColumn, Me.tabletmptbl_PurchaseOrderforSGM.MaterialCodeColumn}, New Global.System.Data.DataColumn() {Me.tabletmptbl_PurchaseOrderDetailsforSGM.IDColumn, Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialCodeColumn}, false)
        Me.Relations.Add(Me.relationtmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmptbl_PurchaseOrderforSGM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmptbl_PurchaseOrderDetailsforSGM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DstmpPurchaseOrder = New DstmpPurchaseOrder
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tmptbl_PurchaseOrderforSGMRowChangeEventHandler(ByVal sender As Object, ByVal e As tmptbl_PurchaseOrderforSGMRowChangeEvent)
    
    Public Delegate Sub tmptbl_PurchaseOrderDetailsforSGMRowChangeEventHandler(ByVal sender As Object, ByVal e As tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmptbl_PurchaseOrderforSGMDataTable
        Inherits Global.System.Data.TypedTableBase(Of tmptbl_PurchaseOrderforSGMRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPurchaseOrderNo As Global.System.Data.DataColumn
        
        Private columnPurchaseOrderDate As Global.System.Data.DataColumn
        
        Private columnPartyName As Global.System.Data.DataColumn
        
        Private columnCurrencyCode As Global.System.Data.DataColumn
        
        Private columnPurchaseOrderType As Global.System.Data.DataColumn
        
        Private columnMaterialCode As Global.System.Data.DataColumn
        
        Private columnMaterialDescription As Global.System.Data.DataColumn
        
        Private columnMaterialSize As Global.System.Data.DataColumn
        
        Private columnMaterialColorDescription As Global.System.Data.DataColumn
        
        Private columnUnit As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnMaterialValue As Global.System.Data.DataColumn
        
        Private columnMaterialTypeDescription As Global.System.Data.DataColumn
        
        Private columnReceivedQuantity As Global.System.Data.DataColumn
        
        Private columnBalanceQuantity As Global.System.Data.DataColumn
        
        Private columnModuleName As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnCreatedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnExeVersionNo As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        Private columnEnteredOnMachineID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmptbl_PurchaseOrderforSGM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrencyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColorDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialColorDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalanceQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModuleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModuleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExeVersionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExeVersionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnteredOnMachineIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredOnMachineID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmptbl_PurchaseOrderforSGMRow
            Get
                Return CType(Me.Rows(index),tmptbl_PurchaseOrderforSGMRow)
            End Get
        End Property
        
        Public Event tmptbl_PurchaseOrderforSGMRowChanging As tmptbl_PurchaseOrderforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderforSGMRowChanged As tmptbl_PurchaseOrderforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderforSGMRowDeleting As tmptbl_PurchaseOrderforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderforSGMRowDeleted As tmptbl_PurchaseOrderforSGMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtmptbl_PurchaseOrderforSGMRow(ByVal row As tmptbl_PurchaseOrderforSGMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtmptbl_PurchaseOrderforSGMRow( _
                    ByVal ID As String,  _
                    ByVal PurchaseOrderNo As String,  _
                    ByVal PurchaseOrderDate As Date,  _
                    ByVal PartyName As String,  _
                    ByVal CurrencyCode As String,  _
                    ByVal PurchaseOrderType As String,  _
                    ByVal MaterialCode As String,  _
                    ByVal MaterialDescription As String,  _
                    ByVal MaterialSize As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal Unit As String,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Price As Decimal,  _
                    ByVal MaterialValue As Decimal,  _
                    ByVal MaterialTypeDescription As String,  _
                    ByVal ReceivedQuantity As Decimal,  _
                    ByVal BalanceQuantity As Decimal,  _
                    ByVal ModuleName As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedDate As Date,  _
                    ByVal ModifiedBy As String,  _
                    ByVal ExeVersionNo As String,  _
                    ByVal ModifiedDate As Date,  _
                    ByVal EnteredOnMachineID As String) As tmptbl_PurchaseOrderforSGMRow
            Dim rowtmptbl_PurchaseOrderforSGMRow As tmptbl_PurchaseOrderforSGMRow = CType(Me.NewRow,tmptbl_PurchaseOrderforSGMRow)
            Dim columnValuesArray() As Object = New Object() {ID, PurchaseOrderNo, PurchaseOrderDate, PartyName, CurrencyCode, PurchaseOrderType, MaterialCode, MaterialDescription, MaterialSize, MaterialColorDescription, Unit, Quantity, Price, MaterialValue, MaterialTypeDescription, ReceivedQuantity, BalanceQuantity, ModuleName, CreatedBy, CreatedDate, ModifiedBy, ExeVersionNo, ModifiedDate, EnteredOnMachineID}
            rowtmptbl_PurchaseOrderforSGMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtmptbl_PurchaseOrderforSGMRow)
            Return rowtmptbl_PurchaseOrderforSGMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tmptbl_PurchaseOrderforSGMDataTable = CType(MyBase.Clone,tmptbl_PurchaseOrderforSGMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tmptbl_PurchaseOrderforSGMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPurchaseOrderNo = MyBase.Columns("PurchaseOrderNo")
            Me.columnPurchaseOrderDate = MyBase.Columns("PurchaseOrderDate")
            Me.columnPartyName = MyBase.Columns("PartyName")
            Me.columnCurrencyCode = MyBase.Columns("CurrencyCode")
            Me.columnPurchaseOrderType = MyBase.Columns("PurchaseOrderType")
            Me.columnMaterialCode = MyBase.Columns("MaterialCode")
            Me.columnMaterialDescription = MyBase.Columns("MaterialDescription")
            Me.columnMaterialSize = MyBase.Columns("MaterialSize")
            Me.columnMaterialColorDescription = MyBase.Columns("MaterialColorDescription")
            Me.columnUnit = MyBase.Columns("Unit")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnMaterialValue = MyBase.Columns("MaterialValue")
            Me.columnMaterialTypeDescription = MyBase.Columns("MaterialTypeDescription")
            Me.columnReceivedQuantity = MyBase.Columns("ReceivedQuantity")
            Me.columnBalanceQuantity = MyBase.Columns("BalanceQuantity")
            Me.columnModuleName = MyBase.Columns("ModuleName")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnCreatedDate = MyBase.Columns("CreatedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnExeVersionNo = MyBase.Columns("ExeVersionNo")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
            Me.columnEnteredOnMachineID = MyBase.Columns("EnteredOnMachineID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPurchaseOrderNo = New Global.System.Data.DataColumn("PurchaseOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderNo)
            Me.columnPurchaseOrderDate = New Global.System.Data.DataColumn("PurchaseOrderDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderDate)
            Me.columnPartyName = New Global.System.Data.DataColumn("PartyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartyName)
            Me.columnCurrencyCode = New Global.System.Data.DataColumn("CurrencyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrencyCode)
            Me.columnPurchaseOrderType = New Global.System.Data.DataColumn("PurchaseOrderType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderType)
            Me.columnMaterialCode = New Global.System.Data.DataColumn("MaterialCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialCode)
            Me.columnMaterialDescription = New Global.System.Data.DataColumn("MaterialDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialDescription)
            Me.columnMaterialSize = New Global.System.Data.DataColumn("MaterialSize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialSize)
            Me.columnMaterialColorDescription = New Global.System.Data.DataColumn("MaterialColorDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialColorDescription)
            Me.columnUnit = New Global.System.Data.DataColumn("Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnMaterialValue = New Global.System.Data.DataColumn("MaterialValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialValue)
            Me.columnMaterialTypeDescription = New Global.System.Data.DataColumn("MaterialTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialTypeDescription)
            Me.columnReceivedQuantity = New Global.System.Data.DataColumn("ReceivedQuantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQuantity)
            Me.columnBalanceQuantity = New Global.System.Data.DataColumn("BalanceQuantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalanceQuantity)
            Me.columnModuleName = New Global.System.Data.DataColumn("ModuleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModuleName)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnCreatedDate = New Global.System.Data.DataColumn("CreatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnExeVersionNo = New Global.System.Data.DataColumn("ExeVersionNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExeVersionNo)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.columnEnteredOnMachineID = New Global.System.Data.DataColumn("EnteredOnMachineID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredOnMachineID)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 50
            Me.columnPurchaseOrderNo.MaxLength = 25
            Me.columnPartyName.MaxLength = 150
            Me.columnCurrencyCode.MaxLength = 20
            Me.columnPurchaseOrderType.MaxLength = 50
            Me.columnMaterialCode.MaxLength = 50
            Me.columnMaterialDescription.MaxLength = 200
            Me.columnMaterialSize.MaxLength = 50
            Me.columnMaterialColorDescription.MaxLength = 50
            Me.columnUnit.MaxLength = 20
            Me.columnMaterialTypeDescription.MaxLength = 100
            Me.columnModuleName.MaxLength = 50
            Me.columnCreatedBy.MaxLength = 100
            Me.columnModifiedBy.MaxLength = 100
            Me.columnExeVersionNo.MaxLength = 50
            Me.columnEnteredOnMachineID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtmptbl_PurchaseOrderforSGMRow() As tmptbl_PurchaseOrderforSGMRow
            Return CType(Me.NewRow,tmptbl_PurchaseOrderforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tmptbl_PurchaseOrderforSGMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tmptbl_PurchaseOrderforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmptbl_PurchaseOrderforSGMRowChangedEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderforSGMRowChanged(Me, New tmptbl_PurchaseOrderforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmptbl_PurchaseOrderforSGMRowChangingEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderforSGMRowChanging(Me, New tmptbl_PurchaseOrderforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmptbl_PurchaseOrderforSGMRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderforSGMRowDeleted(Me, New tmptbl_PurchaseOrderforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmptbl_PurchaseOrderforSGMRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderforSGMRowDeleting(Me, New tmptbl_PurchaseOrderforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetmptbl_PurchaseOrderforSGMRow(ByVal row As tmptbl_PurchaseOrderforSGMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DstmpPurchaseOrder = New DstmpPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmptbl_PurchaseOrderforSGMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmptbl_PurchaseOrderDetailsforSGMDataTable
        Inherits Global.System.Data.TypedTableBase(Of tmptbl_PurchaseOrderDetailsforSGMRow)
        
        Private columnPurchaseOrderDate As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPurchaseOrderNo As Global.System.Data.DataColumn
        
        Private columnPartyName As Global.System.Data.DataColumn
        
        Private columnCurrencyCode As Global.System.Data.DataColumn
        
        Private columnPurchaseOrderType As Global.System.Data.DataColumn
        
        Private columnMaterialCode As Global.System.Data.DataColumn
        
        Private columnMaterialDescription As Global.System.Data.DataColumn
        
        Private columnMaterialSize As Global.System.Data.DataColumn
        
        Private columnMaterialColorDescription As Global.System.Data.DataColumn
        
        Private columnUnit As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnValue As Global.System.Data.DataColumn
        
        Private columnArrivalQty As Global.System.Data.DataColumn
        
        Private columnMaterialTypeDescription As Global.System.Data.DataColumn
        
        Private columnReceivedQuantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmptbl_PurchaseOrderDetailsforSGM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrencyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseOrderTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseOrderType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColorDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialColorDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrivalQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrivalQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmptbl_PurchaseOrderDetailsforSGMRow
            Get
                Return CType(Me.Rows(index),tmptbl_PurchaseOrderDetailsforSGMRow)
            End Get
        End Property
        
        Public Event tmptbl_PurchaseOrderDetailsforSGMRowChanging As tmptbl_PurchaseOrderDetailsforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderDetailsforSGMRowChanged As tmptbl_PurchaseOrderDetailsforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderDetailsforSGMRowDeleting As tmptbl_PurchaseOrderDetailsforSGMRowChangeEventHandler
        
        Public Event tmptbl_PurchaseOrderDetailsforSGMRowDeleted As tmptbl_PurchaseOrderDetailsforSGMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtmptbl_PurchaseOrderDetailsforSGMRow(ByVal row As tmptbl_PurchaseOrderDetailsforSGMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtmptbl_PurchaseOrderDetailsforSGMRow( _
                    ByVal PurchaseOrderDate As Date,  _
                    ByVal ID As String,  _
                    ByVal PurchaseOrderNo As String,  _
                    ByVal PartyName As String,  _
                    ByVal CurrencyCode As String,  _
                    ByVal PurchaseOrderType As String,  _
                    ByVal MaterialCode As String,  _
                    ByVal MaterialDescription As String,  _
                    ByVal MaterialSize As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal Unit As String,  _
                    ByVal Price As Decimal,  _
                    ByVal Value As Decimal,  _
                    ByVal ArrivalQty As Decimal,  _
                    ByVal MaterialTypeDescription As String,  _
                    ByVal ReceivedQuantity As Decimal) As tmptbl_PurchaseOrderDetailsforSGMRow
            Dim rowtmptbl_PurchaseOrderDetailsforSGMRow As tmptbl_PurchaseOrderDetailsforSGMRow = CType(Me.NewRow,tmptbl_PurchaseOrderDetailsforSGMRow)
            Dim columnValuesArray() As Object = New Object() {PurchaseOrderDate, ID, PurchaseOrderNo, PartyName, CurrencyCode, PurchaseOrderType, MaterialCode, MaterialDescription, MaterialSize, MaterialColorDescription, Unit, Price, Value, ArrivalQty, MaterialTypeDescription, ReceivedQuantity}
            rowtmptbl_PurchaseOrderDetailsforSGMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtmptbl_PurchaseOrderDetailsforSGMRow)
            Return rowtmptbl_PurchaseOrderDetailsforSGMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tmptbl_PurchaseOrderDetailsforSGMDataTable = CType(MyBase.Clone,tmptbl_PurchaseOrderDetailsforSGMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tmptbl_PurchaseOrderDetailsforSGMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPurchaseOrderDate = MyBase.Columns("PurchaseOrderDate")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPurchaseOrderNo = MyBase.Columns("PurchaseOrderNo")
            Me.columnPartyName = MyBase.Columns("PartyName")
            Me.columnCurrencyCode = MyBase.Columns("CurrencyCode")
            Me.columnPurchaseOrderType = MyBase.Columns("PurchaseOrderType")
            Me.columnMaterialCode = MyBase.Columns("MaterialCode")
            Me.columnMaterialDescription = MyBase.Columns("MaterialDescription")
            Me.columnMaterialSize = MyBase.Columns("MaterialSize")
            Me.columnMaterialColorDescription = MyBase.Columns("MaterialColorDescription")
            Me.columnUnit = MyBase.Columns("Unit")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnValue = MyBase.Columns("Value")
            Me.columnArrivalQty = MyBase.Columns("ArrivalQty")
            Me.columnMaterialTypeDescription = MyBase.Columns("MaterialTypeDescription")
            Me.columnReceivedQuantity = MyBase.Columns("ReceivedQuantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPurchaseOrderDate = New Global.System.Data.DataColumn("PurchaseOrderDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderDate)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPurchaseOrderNo = New Global.System.Data.DataColumn("PurchaseOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderNo)
            Me.columnPartyName = New Global.System.Data.DataColumn("PartyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartyName)
            Me.columnCurrencyCode = New Global.System.Data.DataColumn("CurrencyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrencyCode)
            Me.columnPurchaseOrderType = New Global.System.Data.DataColumn("PurchaseOrderType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseOrderType)
            Me.columnMaterialCode = New Global.System.Data.DataColumn("MaterialCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialCode)
            Me.columnMaterialDescription = New Global.System.Data.DataColumn("MaterialDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialDescription)
            Me.columnMaterialSize = New Global.System.Data.DataColumn("MaterialSize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialSize)
            Me.columnMaterialColorDescription = New Global.System.Data.DataColumn("MaterialColorDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialColorDescription)
            Me.columnUnit = New Global.System.Data.DataColumn("Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValue)
            Me.columnArrivalQty = New Global.System.Data.DataColumn("ArrivalQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrivalQty)
            Me.columnMaterialTypeDescription = New Global.System.Data.DataColumn("MaterialTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialTypeDescription)
            Me.columnReceivedQuantity = New Global.System.Data.DataColumn("ReceivedQuantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQuantity)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 50
            Me.columnPurchaseOrderNo.MaxLength = 25
            Me.columnPartyName.MaxLength = 150
            Me.columnCurrencyCode.MaxLength = 20
            Me.columnPurchaseOrderType.MaxLength = 50
            Me.columnMaterialCode.MaxLength = 50
            Me.columnMaterialDescription.MaxLength = 200
            Me.columnMaterialSize.MaxLength = 50
            Me.columnMaterialColorDescription.MaxLength = 50
            Me.columnUnit.MaxLength = 20
            Me.columnMaterialTypeDescription.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtmptbl_PurchaseOrderDetailsforSGMRow() As tmptbl_PurchaseOrderDetailsforSGMRow
            Return CType(Me.NewRow,tmptbl_PurchaseOrderDetailsforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tmptbl_PurchaseOrderDetailsforSGMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tmptbl_PurchaseOrderDetailsforSGMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmptbl_PurchaseOrderDetailsforSGMRowChangedEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderDetailsforSGMRowChanged(Me, New tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderDetailsforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmptbl_PurchaseOrderDetailsforSGMRowChangingEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderDetailsforSGMRowChanging(Me, New tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderDetailsforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmptbl_PurchaseOrderDetailsforSGMRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderDetailsforSGMRowDeleted(Me, New tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderDetailsforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmptbl_PurchaseOrderDetailsforSGMRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmptbl_PurchaseOrderDetailsforSGMRowDeleting(Me, New tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent(CType(e.Row,tmptbl_PurchaseOrderDetailsforSGMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetmptbl_PurchaseOrderDetailsforSGMRow(ByVal row As tmptbl_PurchaseOrderDetailsforSGMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DstmpPurchaseOrder = New DstmpPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmptbl_PurchaseOrderDetailsforSGMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmptbl_PurchaseOrderforSGMRow
        Inherits Global.System.Data.DataRow
        
        Private tabletmptbl_PurchaseOrderforSGM As tmptbl_PurchaseOrderforSGMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmptbl_PurchaseOrderforSGM = CType(Me.Table,tmptbl_PurchaseOrderforSGMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.IDColumn),String)
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderNo' in table 'tmptbl_PurchaseOrderforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderDate' in table 'tmptbl_PurchaseOrderforSGM' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartyName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.PartyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartyName' in table 'tmptbl_PurchaseOrderforSGM' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.PartyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrencyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.CurrencyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrencyCode' in table 'tmptbl_PurchaseOrderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.CurrencyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderType' in table 'tmptbl_PurchaseOrderforSGM' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialCode' in table 'tmptbl_PurchaseOrderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialDescription' in table 'tmptbl_PurchaseOrderforSGM' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialSize() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialSizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialSize' in table 'tmptbl_PurchaseOrderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialColorDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialColorDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialColorDescription' in table 'tmptbl_PurchaseOrderfor"& _ 
                            "SGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialColorDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unit' in table 'tmptbl_PurchaseOrderforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'tmptbl_PurchaseOrderforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'tmptbl_PurchaseOrderforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialValue' in table 'tmptbl_PurchaseOrderforSGM' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialTypeDescription' in table 'tmptbl_PurchaseOrderforS"& _ 
                            "GM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQuantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.ReceivedQuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQuantity' in table 'tmptbl_PurchaseOrderforSGM' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.ReceivedQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BalanceQuantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.BalanceQuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BalanceQuantity' in table 'tmptbl_PurchaseOrderforSGM' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.BalanceQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModuleName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.ModuleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModuleName' in table 'tmptbl_PurchaseOrderforSGM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.ModuleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'tmptbl_PurchaseOrderforSGM' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDate' in table 'tmptbl_PurchaseOrderforSGM' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'tmptbl_PurchaseOrderforSGM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExeVersionNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.ExeVersionNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExeVersionNo' in table 'tmptbl_PurchaseOrderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.ExeVersionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'tmptbl_PurchaseOrderforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnteredOnMachineID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderforSGM.EnteredOnMachineIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnteredOnMachineID' in table 'tmptbl_PurchaseOrderforSGM' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderforSGM.EnteredOnMachineIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderNoNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderDateNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartyNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.PartyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartyNameNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.PartyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyCodeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.CurrencyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyCodeNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.CurrencyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderTypeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderTypeNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.PurchaseOrderTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialCodeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialCodeNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialSizeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialSizeNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialColorDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialColorDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialColorDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialColorDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialValueNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialValueNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.MaterialTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialTypeDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.MaterialTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.ReceivedQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQuantityNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.ReceivedQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.BalanceQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceQuantityNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.BalanceQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModuleNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.ModuleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModuleNameNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.ModuleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.CreatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.CreatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExeVersionNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.ExeVersionNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExeVersionNoNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.ExeVersionNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnteredOnMachineIDNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderforSGM.EnteredOnMachineIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnteredOnMachineIDNull()
            Me(Me.tabletmptbl_PurchaseOrderforSGM.EnteredOnMachineIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettmptbl_PurchaseOrderDetailsforSGMRows() As tmptbl_PurchaseOrderDetailsforSGMRow()
            If (Me.Table.ChildRelations("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM") Is Nothing) Then
                Return New tmptbl_PurchaseOrderDetailsforSGMRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM")),tmptbl_PurchaseOrderDetailsforSGMRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmptbl_PurchaseOrderDetailsforSGMRow
        Inherits Global.System.Data.DataRow
        
        Private tabletmptbl_PurchaseOrderDetailsforSGM As tmptbl_PurchaseOrderDetailsforSGMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmptbl_PurchaseOrderDetailsforSGM = CType(Me.Table,tmptbl_PurchaseOrderDetailsforSGMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderDate' in table 'tmptbl_PurchaseOrderDetailsfor"& _ 
                            "SGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.IDColumn),String)
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderNo' in table 'tmptbl_PurchaseOrderDetailsforSG"& _ 
                            "M' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartyName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PartyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartyName' in table 'tmptbl_PurchaseOrderDetailsforSGM' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PartyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrencyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.CurrencyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrencyCode' in table 'tmptbl_PurchaseOrderDetailsforSGM' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.CurrencyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseOrderType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseOrderType' in table 'tmptbl_PurchaseOrderDetailsfor"& _ 
                            "SGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialCode' in table 'tmptbl_PurchaseOrderDetailsforSGM' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialDescription' in table 'tmptbl_PurchaseOrderDetailsf"& _ 
                            "orSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialSize() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialSizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialSize' in table 'tmptbl_PurchaseOrderDetailsforSGM' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialColorDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialColorDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialColorDescription' in table 'tmptbl_PurchaseOrderDet"& _ 
                            "ailsforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialColorDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unit' in table 'tmptbl_PurchaseOrderDetailsforSGM' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'tmptbl_PurchaseOrderDetailsforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Value() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Value' in table 'tmptbl_PurchaseOrderDetailsforSGM' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrivalQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ArrivalQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrivalQty' in table 'tmptbl_PurchaseOrderDetailsforSGM' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ArrivalQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialTypeDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialTypeDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialTypeDescription' in table 'tmptbl_PurchaseOrderDeta"& _ 
                            "ilsforSGM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQuantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ReceivedQuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQuantity' in table 'tmptbl_PurchaseOrderDetailsforS"& _ 
                            "GM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ReceivedQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tmptbl_PurchaseOrderforSGMRowParent() As tmptbl_PurchaseOrderforSGMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM")),tmptbl_PurchaseOrderforSGMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tmptbl_PurchaseOrderforSGM_tmptbl_PurchaseOrderDetailsforSGM"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderDateNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderDateNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderNoNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderNoNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartyNameNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PartyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartyNameNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PartyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyCodeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.CurrencyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyCodeNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.CurrencyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseOrderTypeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseOrderTypeNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PurchaseOrderTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialCodeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialCodeNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialSizeNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialSizeNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialColorDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialColorDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialColorDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialColorDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValueNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValueNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrivalQtyNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ArrivalQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrivalQtyNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ArrivalQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialTypeDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialTypeDescriptionNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.MaterialTypeDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ReceivedQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQuantityNull()
            Me(Me.tabletmptbl_PurchaseOrderDetailsforSGM.ReceivedQuantityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmptbl_PurchaseOrderforSGMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tmptbl_PurchaseOrderforSGMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmptbl_PurchaseOrderforSGMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmptbl_PurchaseOrderforSGMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmptbl_PurchaseOrderDetailsforSGMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tmptbl_PurchaseOrderDetailsforSGMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmptbl_PurchaseOrderDetailsforSGMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmptbl_PurchaseOrderDetailsforSGMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DstmpPurchaseOrderTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tmptbl_PurchaseOrderforSGMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tmptbl_PurchaseOrderforSGM"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PurchaseOrderNo", "PurchaseOrderNo")
            tableMapping.ColumnMappings.Add("PurchaseOrderDate", "PurchaseOrderDate")
            tableMapping.ColumnMappings.Add("PartyName", "PartyName")
            tableMapping.ColumnMappings.Add("CurrencyCode", "CurrencyCode")
            tableMapping.ColumnMappings.Add("PurchaseOrderType", "PurchaseOrderType")
            tableMapping.ColumnMappings.Add("MaterialCode", "MaterialCode")
            tableMapping.ColumnMappings.Add("MaterialDescription", "MaterialDescription")
            tableMapping.ColumnMappings.Add("MaterialSize", "MaterialSize")
            tableMapping.ColumnMappings.Add("MaterialColorDescription", "MaterialColorDescription")
            tableMapping.ColumnMappings.Add("Unit", "Unit")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("MaterialValue", "MaterialValue")
            tableMapping.ColumnMappings.Add("MaterialTypeDescription", "MaterialTypeDescription")
            tableMapping.ColumnMappings.Add("ReceivedQuantity", "ReceivedQuantity")
            tableMapping.ColumnMappings.Add("BalanceQuantity", "BalanceQuantity")
            tableMapping.ColumnMappings.Add("ModuleName", "ModuleName")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate")
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy")
            tableMapping.ColumnMappings.Add("ExeVersionNo", "ExeVersionNo")
            tableMapping.ColumnMappings.Add("ModifiedDate", "ModifiedDate")
            tableMapping.ColumnMappings.Add("EnteredOnMachineID", "EnteredOnMachineID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tmptbl_PurchaseOrderforSGM] ([ID], [PurchaseOrderNo], [PurchaseOrder"& _ 
                "Date], [PartyName], [CurrencyCode], [PurchaseOrderType], [MaterialCode], [Materi"& _ 
                "alDescription], [MaterialSize], [MaterialColorDescription], [Unit], [Quantity], "& _ 
                "[Price], [MaterialValue], [MaterialTypeDescription], [ReceivedQuantity], [Balanc"& _ 
                "eQuantity], [ModuleName], [CreatedBy], [CreatedDate], [ModifiedBy], [ExeVersionN"& _ 
                "o], [ModifiedDate], [EnteredOnMachineID]) VALUES (@ID, @PurchaseOrderNo, @Purcha"& _ 
                "seOrderDate, @PartyName, @CurrencyCode, @PurchaseOrderType, @MaterialCode, @Mate"& _ 
                "rialDescription, @MaterialSize, @MaterialColorDescription, @Unit, @Quantity, @Pr"& _ 
                "ice, @MaterialValue, @MaterialTypeDescription, @ReceivedQuantity, @BalanceQuanti"& _ 
                "ty, @ModuleName, @CreatedBy, @CreatedDate, @ModifiedBy, @ExeVersionNo, @Modified"& _ 
                "Date, @EnteredOnMachineID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PartyName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PartyName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialSize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialSize", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialColorDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialColorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialValue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "MaterialValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialTypeDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceivedQuantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReceivedQuantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BalanceQuantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "BalanceQuantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModuleName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModuleName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExeVersionNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExeVersionNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EnteredOnMachineID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EnteredOnMachineID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SolarERPForSGM.My.MySettings.Default.AHGroup
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, PurchaseOrderNo, PurchaseOrderDate, PartyName, CurrencyCode, Pu"& _ 
                "rchaseOrderType, MaterialCode, MaterialDescription, MaterialSize, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             MaterialColorDescription, Unit, Quantity, Price, MaterialValue, Mat"& _ 
                "erialTypeDescription, ReceivedQuantity, BalanceQuantity, ModuleName, CreatedBy, "& _ 
                "CreatedDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ModifiedBy, ExeVersionNo, ModifiedDate, "& _ 
                "EnteredOnMachineID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tmptbl_PurchaseOrderforSGM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Purchas"& _ 
                "eOrderDate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderforSGMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DstmpPurchaseOrder.tmptbl_PurchaseOrderforSGMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderforSGMDataTable = New DstmpPurchaseOrder.tmptbl_PurchaseOrderforSGMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderforSGMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DstmpPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "tmptbl_PurchaseOrderforSGM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As String,  _
                    ByVal PurchaseOrderNo As String,  _
                    ByVal PurchaseOrderDate As Global.System.Nullable(Of Date),  _
                    ByVal PartyName As String,  _
                    ByVal CurrencyCode As String,  _
                    ByVal PurchaseOrderType As String,  _
                    ByVal MaterialCode As String,  _
                    ByVal MaterialDescription As String,  _
                    ByVal MaterialSize As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal Unit As String,  _
                    ByVal Quantity As Global.System.Nullable(Of Decimal),  _
                    ByVal Price As Global.System.Nullable(Of Decimal),  _
                    ByVal MaterialValue As Global.System.Nullable(Of Decimal),  _
                    ByVal MaterialTypeDescription As String,  _
                    ByVal ReceivedQuantity As Global.System.Nullable(Of Decimal),  _
                    ByVal BalanceQuantity As Global.System.Nullable(Of Decimal),  _
                    ByVal ModuleName As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedDate As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedBy As String,  _
                    ByVal ExeVersionNo As String,  _
                    ByVal ModifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal EnteredOnMachineID As String) As Integer
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (PurchaseOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PurchaseOrderNo,String)
            End If
            If (PurchaseOrderDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PurchaseOrderDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PartyName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PartyName,String)
            End If
            If (CurrencyCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CurrencyCode,String)
            End If
            If (PurchaseOrderType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PurchaseOrderType,String)
            End If
            If (MaterialCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaterialCode,String)
            End If
            If (MaterialDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MaterialDescription,String)
            End If
            If (MaterialSize Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MaterialSize,String)
            End If
            If (MaterialColorDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaterialColorDescription,String)
            End If
            If (Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unit,String)
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Quantity.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Price.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (MaterialValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MaterialValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (MaterialTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MaterialTypeDescription,String)
            End If
            If (ReceivedQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ReceivedQuantity.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (BalanceQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(BalanceQuantity.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (ModuleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ModuleName,String)
            End If
            If (CreatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CreatedBy,String)
            End If
            If (CreatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CreatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (ModifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ModifiedBy,String)
            End If
            If (ExeVersionNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ExeVersionNo,String)
            End If
            If (ModifiedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ModifiedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (EnteredOnMachineID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(EnteredOnMachineID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tmptbl_PurchaseOrderDetailsforSGMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tmptbl_PurchaseOrderDetailsforSGM"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PurchaseOrderNo", "PurchaseOrderNo")
            tableMapping.ColumnMappings.Add("PartyName", "PartyName")
            tableMapping.ColumnMappings.Add("CurrencyCode", "CurrencyCode")
            tableMapping.ColumnMappings.Add("PurchaseOrderType", "PurchaseOrderType")
            tableMapping.ColumnMappings.Add("MaterialCode", "MaterialCode")
            tableMapping.ColumnMappings.Add("MaterialDescription", "MaterialDescription")
            tableMapping.ColumnMappings.Add("MaterialSize", "MaterialSize")
            tableMapping.ColumnMappings.Add("MaterialColorDescription", "MaterialColorDescription")
            tableMapping.ColumnMappings.Add("Unit", "Unit")
            tableMapping.ColumnMappings.Add("Quantity", "Price")
            tableMapping.ColumnMappings.Add("Price", "Value")
            tableMapping.ColumnMappings.Add("MaterialValue", "ArrivalQty")
            tableMapping.ColumnMappings.Add("MaterialTypeDescription", "MaterialTypeDescription")
            tableMapping.ColumnMappings.Add("ReceivedQuantity", "ReceivedQuantity")
            tableMapping.ColumnMappings.Add("PurchaseOrderDate", "PurchaseOrderDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tmptbl_PurchaseOrderDetailsforSGM] ([PurchaseOrderDate], [ID], [Purc"& _ 
                "haseOrderNo], [PartyName], [CurrencyCode], [PurchaseOrderType], [MaterialCode], "& _ 
                "[MaterialDescription], [MaterialSize], [MaterialColorDescription], [Unit], [Quan"& _ 
                "tity], [Price], [MaterialValue], [MaterialTypeDescription], [ReceivedQuantity]) "& _ 
                "VALUES (@PurchaseOrderDate, @ID, @PurchaseOrderNo, @PartyName, @CurrencyCode, @P"& _ 
                "urchaseOrderType, @MaterialCode, @MaterialDescription, @MaterialSize, @MaterialC"& _ 
                "olorDescription, @Unit, @Quantity, @Price, @MaterialValue, @MaterialTypeDescript"& _ 
                "ion, @ReceivedQuantity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PartyName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PartyName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PurchaseOrderType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PurchaseOrderType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialSize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialSize", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialColorDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialColorDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialValue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 16, 2, "MaterialValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialTypeDescription", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialTypeDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceivedQuantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ReceivedQuantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SolarERPForSGM.My.MySettings.Default.AHGroup
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PurchaseOrderDate, ID, PurchaseOrderNo, PartyName, CurrencyCode, Pu"& _ 
                "rchaseOrderType, MaterialCode, MaterialDescription, MaterialSize, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             MaterialColorDescription, Unit, Quantity, Price, MaterialValue, Mat"& _ 
                "erialTypeDescription, ReceivedQuantity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tmptbl_PurchaseOrderDeta"& _ 
                "ilsforSGM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderDetailsforSGMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DstmpPurchaseOrder.tmptbl_PurchaseOrderDetailsforSGMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderDetailsforSGMDataTable = New DstmpPurchaseOrder.tmptbl_PurchaseOrderDetailsforSGMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DstmpPurchaseOrder.tmptbl_PurchaseOrderDetailsforSGMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DstmpPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "tmptbl_PurchaseOrderDetailsforSGM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PurchaseOrderDate As Global.System.Nullable(Of Date),  _
                    ByVal ID As String,  _
                    ByVal PurchaseOrderNo As String,  _
                    ByVal PartyName As String,  _
                    ByVal CurrencyCode As String,  _
                    ByVal PurchaseOrderType As String,  _
                    ByVal MaterialCode As String,  _
                    ByVal MaterialDescription As String,  _
                    ByVal MaterialSize As String,  _
                    ByVal MaterialColorDescription As String,  _
                    ByVal Unit As String,  _
                    ByVal Quantity As Global.System.Nullable(Of Decimal),  _
                    ByVal Price As Global.System.Nullable(Of Decimal),  _
                    ByVal MaterialValue As Global.System.Nullable(Of Decimal),  _
                    ByVal MaterialTypeDescription As String,  _
                    ByVal ReceivedQuantity As Global.System.Nullable(Of Decimal)) As Integer
            If (PurchaseOrderDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PurchaseOrderDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID,String)
            End If
            If (PurchaseOrderNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PurchaseOrderNo,String)
            End If
            If (PartyName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PartyName,String)
            End If
            If (CurrencyCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CurrencyCode,String)
            End If
            If (PurchaseOrderType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PurchaseOrderType,String)
            End If
            If (MaterialCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MaterialCode,String)
            End If
            If (MaterialDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MaterialDescription,String)
            End If
            If (MaterialSize Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MaterialSize,String)
            End If
            If (MaterialColorDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaterialColorDescription,String)
            End If
            If (Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unit,String)
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Quantity.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Price.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (MaterialValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MaterialValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (MaterialTypeDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MaterialTypeDescription,String)
            End If
            If (ReceivedQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ReceivedQuantity.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tmptbl_PurchaseOrderforSGMTableAdapter As tmptbl_PurchaseOrderforSGMTableAdapter
        
        Private _tmptbl_PurchaseOrderDetailsforSGMTableAdapter As tmptbl_PurchaseOrderDetailsforSGMTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tmptbl_PurchaseOrderforSGMTableAdapter() As tmptbl_PurchaseOrderforSGMTableAdapter
            Get
                Return Me._tmptbl_PurchaseOrderforSGMTableAdapter
            End Get
            Set
                Me._tmptbl_PurchaseOrderforSGMTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tmptbl_PurchaseOrderDetailsforSGMTableAdapter() As tmptbl_PurchaseOrderDetailsforSGMTableAdapter
            Get
                Return Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter
            End Get
            Set
                Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection
                End If
                If ((Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DstmpPurchaseOrder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderforSGMTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderDetailsforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DstmpPurchaseOrder, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderforSGMTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderDetailsforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DstmpPurchaseOrder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderDetailsforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tmptbl_PurchaseOrderforSGM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tmptbl_PurchaseOrderforSGMTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DstmpPurchaseOrder) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tmptbl_PurchaseOrderforSGMTableAdapter, Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection)
                    Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_PurchaseOrderforSGMTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tmptbl_PurchaseOrderforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tmptbl_PurchaseOrderforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tmptbl_PurchaseOrderforSGMTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter, Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection)
                    Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tmptbl_PurchaseOrderforSGMTableAdapter) Is Nothing) Then
                    Me._tmptbl_PurchaseOrderforSGMTableAdapter.Connection = CType(revertConnections(Me._tmptbl_PurchaseOrderforSGMTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_PurchaseOrderforSGMTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter) Is Nothing) Then
                    Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Connection = CType(revertConnections(Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tmptbl_PurchaseOrderDetailsforSGMTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
