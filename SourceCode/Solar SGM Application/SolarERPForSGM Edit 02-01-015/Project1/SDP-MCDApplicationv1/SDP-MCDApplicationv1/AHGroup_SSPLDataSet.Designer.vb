'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.5485.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("AHGroup_SSPLDataSet")>  _
Partial Public Class AHGroup_SSPLDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableAbbrevTable As AbbrevTableDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property AbbrevTable() As AbbrevTableDataTable
        Get
            Return Me.tableAbbrevTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As AHGroup_SSPLDataSet = CType(MyBase.Clone,AHGroup_SSPLDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AbbrevTable")) Is Nothing) Then
                MyBase.Tables.Add(New AbbrevTableDataTable(ds.Tables("AbbrevTable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAbbrevTable = CType(MyBase.Tables("AbbrevTable"),AbbrevTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAbbrevTable) Is Nothing) Then
                Me.tableAbbrevTable.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "AHGroup_SSPLDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AHGroup_SSPLDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAbbrevTable = New AbbrevTableDataTable
        MyBase.Tables.Add(Me.tableAbbrevTable)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAbbrevTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AHGroup_SSPLDataSet = New AHGroup_SSPLDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AbbrevTableRowChangeEventHandler(ByVal sender As Object, ByVal e As AbbrevTableRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AbbrevTableDataTable
        Inherits Global.System.Data.TypedTableBase(Of AbbrevTableRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAbbrev_ As Global.System.Data.DataColumn
        
        Private columnFullName_ As Global.System.Data.DataColumn
        
        Private columnGroup_ As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnCreatedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        Private columnEnteredOnMachineID As Global.System.Data.DataColumn
        
        Private columnAllocatedTo As Global.System.Data.DataColumn
        
        Private columnRecordNotes As Global.System.Data.DataColumn
        
        Private columnConfirmedBy As Global.System.Data.DataColumn
        
        Private columnConfirmedStatus As Global.System.Data.DataColumn
        
        Private columnApprovedStatus As Global.System.Data.DataColumn
        
        Private columnSortingOrderNo As Global.System.Data.DataColumn
        
        Private columnIsApproved As Global.System.Data.DataColumn
        
        Private columnApprovedBy As Global.System.Data.DataColumn
        
        Private columnApprovedOn As Global.System.Data.DataColumn
        
        Private columnModuleName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AbbrevTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Abbrev_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbbrev_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullName_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullName_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnteredOnMachineIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnteredOnMachineID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AllocatedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllocatedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovedStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovedStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortingOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortingOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsApprovedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsApproved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovedOnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovedOn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModuleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModuleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AbbrevTableRow
            Get
                Return CType(Me.Rows(index),AbbrevTableRow)
            End Get
        End Property
        
        Public Event AbbrevTableRowChanging As AbbrevTableRowChangeEventHandler
        
        Public Event AbbrevTableRowChanged As AbbrevTableRowChangeEventHandler
        
        Public Event AbbrevTableRowDeleting As AbbrevTableRowChangeEventHandler
        
        Public Event AbbrevTableRowDeleted As AbbrevTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAbbrevTableRow(ByVal row As AbbrevTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAbbrevTableRow( _
                    ByVal ID As String,  _
                    ByVal Abbrev_ As String,  _
                    ByVal FullName_ As String,  _
                    ByVal Group_ As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedDate As Date,  _
                    ByVal ModifiedBy As String,  _
                    ByVal ModifiedDate As Date,  _
                    ByVal EnteredOnMachineID As String,  _
                    ByVal AllocatedTo As String,  _
                    ByVal RecordNotes As String,  _
                    ByVal ConfirmedBy As String,  _
                    ByVal ConfirmedStatus As String,  _
                    ByVal ApprovedStatus As String,  _
                    ByVal SortingOrderNo As Integer,  _
                    ByVal IsApproved As Boolean,  _
                    ByVal ApprovedBy As String,  _
                    ByVal ApprovedOn As Date,  _
                    ByVal ModuleName As String) As AbbrevTableRow
            Dim rowAbbrevTableRow As AbbrevTableRow = CType(Me.NewRow,AbbrevTableRow)
            Dim columnValuesArray() As Object = New Object() {ID, Abbrev_, FullName_, Group_, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, EnteredOnMachineID, AllocatedTo, RecordNotes, ConfirmedBy, ConfirmedStatus, ApprovedStatus, SortingOrderNo, IsApproved, ApprovedBy, ApprovedOn, ModuleName}
            rowAbbrevTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAbbrevTableRow)
            Return rowAbbrevTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AbbrevTableDataTable = CType(MyBase.Clone,AbbrevTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AbbrevTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAbbrev_ = MyBase.Columns("Abbrev_")
            Me.columnFullName_ = MyBase.Columns("FullName_")
            Me.columnGroup_ = MyBase.Columns("Group_")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnCreatedDate = MyBase.Columns("CreatedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
            Me.columnEnteredOnMachineID = MyBase.Columns("EnteredOnMachineID")
            Me.columnAllocatedTo = MyBase.Columns("AllocatedTo")
            Me.columnRecordNotes = MyBase.Columns("RecordNotes")
            Me.columnConfirmedBy = MyBase.Columns("ConfirmedBy")
            Me.columnConfirmedStatus = MyBase.Columns("ConfirmedStatus")
            Me.columnApprovedStatus = MyBase.Columns("ApprovedStatus")
            Me.columnSortingOrderNo = MyBase.Columns("SortingOrderNo")
            Me.columnIsApproved = MyBase.Columns("IsApproved")
            Me.columnApprovedBy = MyBase.Columns("ApprovedBy")
            Me.columnApprovedOn = MyBase.Columns("ApprovedOn")
            Me.columnModuleName = MyBase.Columns("ModuleName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAbbrev_ = New Global.System.Data.DataColumn("Abbrev_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbbrev_)
            Me.columnFullName_ = New Global.System.Data.DataColumn("FullName_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullName_)
            Me.columnGroup_ = New Global.System.Data.DataColumn("Group_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnCreatedDate = New Global.System.Data.DataColumn("CreatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.columnEnteredOnMachineID = New Global.System.Data.DataColumn("EnteredOnMachineID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnteredOnMachineID)
            Me.columnAllocatedTo = New Global.System.Data.DataColumn("AllocatedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllocatedTo)
            Me.columnRecordNotes = New Global.System.Data.DataColumn("RecordNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordNotes)
            Me.columnConfirmedBy = New Global.System.Data.DataColumn("ConfirmedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedBy)
            Me.columnConfirmedStatus = New Global.System.Data.DataColumn("ConfirmedStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedStatus)
            Me.columnApprovedStatus = New Global.System.Data.DataColumn("ApprovedStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovedStatus)
            Me.columnSortingOrderNo = New Global.System.Data.DataColumn("SortingOrderNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortingOrderNo)
            Me.columnIsApproved = New Global.System.Data.DataColumn("IsApproved", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsApproved)
            Me.columnApprovedBy = New Global.System.Data.DataColumn("ApprovedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovedBy)
            Me.columnApprovedOn = New Global.System.Data.DataColumn("ApprovedOn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovedOn)
            Me.columnModuleName = New Global.System.Data.DataColumn("ModuleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModuleName)
            Me.columnID.MaxLength = 50
            Me.columnAbbrev_.AllowDBNull = false
            Me.columnAbbrev_.MaxLength = 50
            Me.columnFullName_.MaxLength = 100
            Me.columnGroup_.AllowDBNull = false
            Me.columnGroup_.MaxLength = 50
            Me.columnCreatedBy.MaxLength = 100
            Me.columnModifiedBy.MaxLength = 100
            Me.columnEnteredOnMachineID.MaxLength = 50
            Me.columnAllocatedTo.MaxLength = 50
            Me.columnRecordNotes.MaxLength = 100
            Me.columnConfirmedBy.MaxLength = 50
            Me.columnConfirmedStatus.MaxLength = 20
            Me.columnApprovedStatus.MaxLength = 20
            Me.columnApprovedBy.MaxLength = 50
            Me.columnModuleName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAbbrevTableRow() As AbbrevTableRow
            Return CType(Me.NewRow,AbbrevTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AbbrevTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AbbrevTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AbbrevTableRowChangedEvent) Is Nothing) Then
                RaiseEvent AbbrevTableRowChanged(Me, New AbbrevTableRowChangeEvent(CType(e.Row,AbbrevTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AbbrevTableRowChangingEvent) Is Nothing) Then
                RaiseEvent AbbrevTableRowChanging(Me, New AbbrevTableRowChangeEvent(CType(e.Row,AbbrevTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AbbrevTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent AbbrevTableRowDeleted(Me, New AbbrevTableRowChangeEvent(CType(e.Row,AbbrevTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AbbrevTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent AbbrevTableRowDeleting(Me, New AbbrevTableRowChangeEvent(CType(e.Row,AbbrevTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAbbrevTableRow(ByVal row As AbbrevTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AHGroup_SSPLDataSet = New AHGroup_SSPLDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AbbrevTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AbbrevTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableAbbrevTable As AbbrevTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAbbrevTable = CType(Me.Table,AbbrevTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abbrev_() As String
            Get
                Return CType(Me(Me.tableAbbrevTable.Abbrev_Column),String)
            End Get
            Set
                Me(Me.tableAbbrevTable.Abbrev_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullName_() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.FullName_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullName_' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.FullName_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_() As String
            Get
                Return CType(Me(Me.tableAbbrevTable.Group_Column),String)
            End Get
            Set
                Me(Me.tableAbbrevTable.Group_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.CreatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDate' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.CreatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnteredOnMachineID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.EnteredOnMachineIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnteredOnMachineID' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.EnteredOnMachineIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AllocatedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.AllocatedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AllocatedTo' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.AllocatedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.RecordNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordNotes' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.RecordNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ConfirmedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedBy' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ConfirmedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ConfirmedStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedStatus' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ConfirmedStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovedStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ApprovedStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovedStatus' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ApprovedStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SortingOrderNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.SortingOrderNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SortingOrderNo' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.SortingOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsApproved() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.IsApprovedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsApproved' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.IsApprovedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ApprovedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovedBy' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ApprovedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovedOn() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ApprovedOnColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovedOn' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ApprovedOnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModuleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAbbrevTable.ModuleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModuleName' in table 'AbbrevTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbbrevTable.ModuleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableAbbrevTable.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullName_Null() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.FullName_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullName_Null()
            Me(Me.tableAbbrevTable.FullName_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tableAbbrevTable.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.CreatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateNull()
            Me(Me.tableAbbrevTable.CreatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableAbbrevTable.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableAbbrevTable.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnteredOnMachineIDNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.EnteredOnMachineIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnteredOnMachineIDNull()
            Me(Me.tableAbbrevTable.EnteredOnMachineIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAllocatedToNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.AllocatedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAllocatedToNull()
            Me(Me.tableAbbrevTable.AllocatedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordNotesNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.RecordNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordNotesNull()
            Me(Me.tableAbbrevTable.RecordNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedByNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ConfirmedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedByNull()
            Me(Me.tableAbbrevTable.ConfirmedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedStatusNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ConfirmedStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedStatusNull()
            Me(Me.tableAbbrevTable.ConfirmedStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovedStatusNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ApprovedStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovedStatusNull()
            Me(Me.tableAbbrevTable.ApprovedStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortingOrderNoNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.SortingOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortingOrderNoNull()
            Me(Me.tableAbbrevTable.SortingOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsApprovedNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.IsApprovedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsApprovedNull()
            Me(Me.tableAbbrevTable.IsApprovedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovedByNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ApprovedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovedByNull()
            Me(Me.tableAbbrevTable.ApprovedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovedOnNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ApprovedOnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovedOnNull()
            Me(Me.tableAbbrevTable.ApprovedOnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModuleNameNull() As Boolean
            Return Me.IsNull(Me.tableAbbrevTable.ModuleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModuleNameNull()
            Me(Me.tableAbbrevTable.ModuleNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class AbbrevTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AbbrevTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AbbrevTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AbbrevTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AHGroup_SSPLDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class AbbrevTableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AbbrevTable"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Abbrev_", "Abbrev_")
            tableMapping.ColumnMappings.Add("FullName_", "FullName_")
            tableMapping.ColumnMappings.Add("Group_", "Group_")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate")
            tableMapping.ColumnMappings.Add("ModifiedBy", "ModifiedBy")
            tableMapping.ColumnMappings.Add("ModifiedDate", "ModifiedDate")
            tableMapping.ColumnMappings.Add("EnteredOnMachineID", "EnteredOnMachineID")
            tableMapping.ColumnMappings.Add("AllocatedTo", "AllocatedTo")
            tableMapping.ColumnMappings.Add("RecordNotes", "RecordNotes")
            tableMapping.ColumnMappings.Add("ConfirmedBy", "ConfirmedBy")
            tableMapping.ColumnMappings.Add("ConfirmedStatus", "ConfirmedStatus")
            tableMapping.ColumnMappings.Add("ApprovedStatus", "ApprovedStatus")
            tableMapping.ColumnMappings.Add("SortingOrderNo", "SortingOrderNo")
            tableMapping.ColumnMappings.Add("IsApproved", "IsApproved")
            tableMapping.ColumnMappings.Add("ApprovedBy", "ApprovedBy")
            tableMapping.ColumnMappings.Add("ApprovedOn", "ApprovedOn")
            tableMapping.ColumnMappings.Add("ModuleName", "ModuleName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AbbrevTable] ([ID], [Abbrev_], [FullName_], [Group_], [Created"& _ 
                "By], [CreatedDate], [ModifiedBy], [ModifiedDate], [EnteredOnMachineID], [Allocat"& _ 
                "edTo], [RecordNotes], [ConfirmedBy], [ConfirmedStatus], [ApprovedStatus], [Sorti"& _ 
                "ngOrderNo], [IsApproved], [ApprovedBy], [ApprovedOn], [ModuleName]) VALUES (@ID,"& _ 
                " @Abbrev_, @FullName_, @Group_, @CreatedBy, @CreatedDate, @ModifiedBy, @Modified"& _ 
                "Date, @EnteredOnMachineID, @AllocatedTo, @RecordNotes, @ConfirmedBy, @ConfirmedS"& _ 
                "tatus, @ApprovedStatus, @SortingOrderNo, @IsApproved, @ApprovedBy, @ApprovedOn, "& _ 
                "@ModuleName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlClient.SqlParameter = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@Abbrev_"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "Abbrev_"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@FullName_"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "FullName_"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@Group_"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "Group_"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@CreatedBy"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "CreatedBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@CreatedDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "CreatedDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ModifiedBy"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ModifiedBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ModifiedDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ModifiedDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@EnteredOnMachineID"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "EnteredOnMachineID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@AllocatedTo"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "AllocatedTo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@RecordNotes"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "RecordNotes"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ConfirmedBy"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ConfirmedBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ConfirmedStatus"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ConfirmedStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ApprovedStatus"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ApprovedStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@SortingOrderNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SortingOrderNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@IsApproved"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "IsApproved"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ApprovedBy"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ApprovedBy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ApprovedOn"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ApprovedOn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlClient.SqlParameter
            param.ParameterName = "@ModuleName"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = true
            param.SourceColumn = "ModuleName"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=KHLI-ERPLAP;Initial Catalog=AHGroup_SSPL;Persist Security Info=True;U"& _ 
                "ser ID=erp;Password=KHLIerp1234;"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Abbrev_, FullName_, Group_, CreatedBy, CreatedDate, ModifiedBy, Modifi"& _ 
                "edDate, EnteredOnMachineID, AllocatedTo, RecordNotes, ConfirmedBy, ConfirmedStat"& _ 
                "us, ApprovedStatus, SortingOrderNo, IsApproved, ApprovedBy, ApprovedOn, ModuleNa"& _ 
                "me FROM dbo.AbbrevTable"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AHGroup_SSPLDataSet.AbbrevTableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AHGroup_SSPLDataSet.AbbrevTableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AHGroup_SSPLDataSet.AbbrevTableDataTable = New AHGroup_SSPLDataSet.AbbrevTableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AHGroup_SSPLDataSet.AbbrevTableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AHGroup_SSPLDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AbbrevTable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As String,  _
                    ByVal Abbrev_ As String,  _
                    ByVal FullName_ As String,  _
                    ByVal Group_ As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedDate As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedBy As String,  _
                    ByVal ModifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal EnteredOnMachineID As String,  _
                    ByVal AllocatedTo As String,  _
                    ByVal RecordNotes As String,  _
                    ByVal ConfirmedBy As String,  _
                    ByVal ConfirmedStatus As String,  _
                    ByVal ApprovedStatus As String,  _
                    ByVal SortingOrderNo As Global.System.Nullable(Of Integer),  _
                    ByVal IsApproved As Global.System.Nullable(Of Boolean),  _
                    ByVal ApprovedBy As String,  _
                    ByVal ApprovedOn As Global.System.Nullable(Of Date),  _
                    ByVal ModuleName As String) As Integer
            If (ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (Abbrev_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Abbrev_")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Abbrev_,String)
            End If
            If (FullName_ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FullName_,String)
            End If
            If (Group_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Group_")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Group_,String)
            End If
            If (CreatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CreatedBy,String)
            End If
            If (CreatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CreatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ModifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ModifiedBy,String)
            End If
            If (ModifiedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ModifiedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (EnteredOnMachineID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(EnteredOnMachineID,String)
            End If
            If (AllocatedTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(AllocatedTo,String)
            End If
            If (RecordNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RecordNotes,String)
            End If
            If (ConfirmedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ConfirmedBy,String)
            End If
            If (ConfirmedStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ConfirmedStatus,String)
            End If
            If (ApprovedStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ApprovedStatus,String)
            End If
            If (SortingOrderNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SortingOrderNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (IsApproved.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(IsApproved.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ApprovedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ApprovedBy,String)
            End If
            If (ApprovedOn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ApprovedOn.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ModuleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(ModuleName,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace

Namespace AHGroup_SSPLDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
