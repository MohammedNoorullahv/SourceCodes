// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OptimizerBeta3.Data;

namespace OptimizerBeta3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210609092538_022-UpdateArticleGroup")]
    partial class _022UpdateArticleGroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.ArticleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ArticleNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKArticleType")
                        .HasColumnType("int");

                    b.Property<int>("FKBrand")
                        .HasColumnType("int");

                    b.Property<int>("FKGroup")
                        .HasColumnType("int");

                    b.Property<int>("FKParty")
                        .HasColumnType("int");

                    b.Property<int>("FKSeason")
                        .HasColumnType("int");

                    b.Property<int>("FKSizeFor")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKArticleType");

                    b.HasIndex("FKBrand");

                    b.HasIndex("FKGroup");

                    b.HasIndex("FKParty");

                    b.HasIndex("FKSeason");

                    b.HasIndex("FKSizeFor");

                    b.ToTable("articleGroups");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKBankName")
                        .HasColumnType("int");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FKBankName");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.ColorMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Combination")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerColourName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKColour")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FKColour");

                    b.ToTable("colorMasters");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKArea")
                        .HasColumnType("int");

                    b.Property<int>("FKCity")
                        .HasColumnType("int");

                    b.Property<int>("FKPincode")
                        .HasColumnType("int");

                    b.Property<int>("FKState")
                        .HasColumnType("int");

                    b.Property<string>("GSTNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MailId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("FKArea");

                    b.HasIndex("FKCity");

                    b.HasIndex("FKPincode");

                    b.HasIndex("FKState");

                    b.ToTable("companyInfos");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.CustomerPersonInfoDtls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMailId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKPartyInfo")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("HomePhoneNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficePhoneNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("WeddingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("customerPersonInfoDtls");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.LookUpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("SlNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("lookUpCategories");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.LookUpMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKLookUpCategory")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("FKLookUpCategory");

                    b.ToTable("lookUpMasters");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Materials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKBrand")
                        .HasColumnType("int");

                    b.Property<int>("FKCategory")
                        .HasColumnType("int");

                    b.Property<int>("FKIIUom")
                        .HasColumnType("int");

                    b.Property<int>("FKSource")
                        .HasColumnType("int");

                    b.Property<int>("FKSubType")
                        .HasColumnType("int");

                    b.Property<int>("FKType")
                        .HasColumnType("int");

                    b.Property<int>("FKUom")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpirable")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrintDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FKBrand");

                    b.HasIndex("FKCategory");

                    b.HasIndex("FKIIUom");

                    b.HasIndex("FKSource");

                    b.HasIndex("FKSubType");

                    b.HasIndex("FKType");

                    b.HasIndex("FKUom");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.OfferDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKAnniverseryInfo")
                        .HasColumnType("int");

                    b.Property<int>("FKOffer")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLastRange")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RangeSubSlNo")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("ValueFrom")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("ValueTo")
                        .HasColumnType("Decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FKAnniverseryInfo");

                    b.HasIndex("FKOffer");

                    b.ToTable("offerDetails");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Offers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplicableForInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplicableForItem")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnniverseryBased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtendable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRangeOffer")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumDiscountValue")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("MinimumBillValue")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("RangeSlNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("offers");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.PartyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKArea")
                        .HasColumnType("int");

                    b.Property<int>("FKCategory")
                        .HasColumnType("int");

                    b.Property<int>("FKCity")
                        .HasColumnType("int");

                    b.Property<int>("FKCountry")
                        .HasColumnType("int");

                    b.Property<int>("FKPincode")
                        .HasColumnType("int");

                    b.Property<int>("FKState")
                        .HasColumnType("int");

                    b.Property<string>("GSTNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MailId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("FKArea");

                    b.HasIndex("FKCategory");

                    b.HasIndex("FKCity");

                    b.HasIndex("FKCountry");

                    b.HasIndex("FKPincode");

                    b.HasIndex("FKState");

                    b.ToTable("partyInfos");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.PartyInfoDtls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKArea")
                        .HasColumnType("int");

                    b.Property<int>("FKCity")
                        .HasColumnType("int");

                    b.Property<int>("FKCountry")
                        .HasColumnType("int");

                    b.Property<int>("FKPartyInfo")
                        .HasColumnType("int");

                    b.Property<int>("FKPincode")
                        .HasColumnType("int");

                    b.Property<int>("FKState")
                        .HasColumnType("int");

                    b.Property<int>("FKUnitType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MailId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("FKArea");

                    b.HasIndex("FKCity");

                    b.HasIndex("FKCountry");

                    b.HasIndex("FKPartyInfo");

                    b.HasIndex("FKPincode");

                    b.HasIndex("FKState");

                    b.HasIndex("FKUnitType");

                    b.ToTable("partyInfoDtls");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.PaymentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CardNoMinLength")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpiryDateCompulsory")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNameCompulsory")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("paymentOptions");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.SizeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("FKSizeCategory")
                        .HasColumnType("int");

                    b.Property<int>("FKSizeFor")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHalfSize")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Size01")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Size02")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size03")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size04")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size05")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size06")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size07")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size08")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size09")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size10")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size11")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size13")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size14")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size15")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size16")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size17")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Size18")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FKSizeCategory");

                    b.HasIndex("FKSizeFor");

                    b.ToTable("sizeMasters");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.UnitMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredSystemId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("FKArea")
                        .HasColumnType("int");

                    b.Property<int>("FKCity")
                        .HasColumnType("int");

                    b.Property<int>("FKCompanyInfo")
                        .HasColumnType("int");

                    b.Property<int>("FKPincode")
                        .HasColumnType("int");

                    b.Property<int>("FKState")
                        .HasColumnType("int");

                    b.Property<int>("FKUnitType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MailId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("FKArea");

                    b.HasIndex("FKCity");

                    b.HasIndex("FKPincode");

                    b.HasIndex("FKState");

                    b.HasIndex("FKUnitType");

                    b.ToTable("unitMasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.ArticleGroup", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterArticleType")
                        .WithMany()
                        .HasForeignKey("FKArticleType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterBrand")
                        .WithMany()
                        .HasForeignKey("FKBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterGroup")
                        .WithMany()
                        .HasForeignKey("FKGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.PartyInfo", "PartyInfo")
                        .WithMany()
                        .HasForeignKey("FKParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.Season", "Season")
                        .WithMany()
                        .HasForeignKey("FKSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterSizeFor")
                        .WithMany()
                        .HasForeignKey("FKSizeFor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterArticleType");

                    b.Navigation("LookUpMasterBrand");

                    b.Navigation("LookUpMasterGroup");

                    b.Navigation("LookUpMasterSizeFor");

                    b.Navigation("PartyInfo");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Bank", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterBank")
                        .WithMany()
                        .HasForeignKey("FKBankName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterBank");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.ColorMaster", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterColour")
                        .WithMany()
                        .HasForeignKey("FKColour")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterColour");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.CompanyInfo", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterArea")
                        .WithMany()
                        .HasForeignKey("FKArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCity")
                        .WithMany()
                        .HasForeignKey("FKCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterPincode")
                        .WithMany()
                        .HasForeignKey("FKPincode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterState")
                        .WithMany()
                        .HasForeignKey("FKState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterArea");

                    b.Navigation("LookUpMasterCity");

                    b.Navigation("LookUpMasterPincode");

                    b.Navigation("LookUpMasterState");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.LookUpMaster", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpCategory", "LookUpCategory")
                        .WithMany()
                        .HasForeignKey("FKLookUpCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpCategory");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.Materials", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterBrand")
                        .WithMany()
                        .HasForeignKey("FKBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCategory")
                        .WithMany()
                        .HasForeignKey("FKCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterIIUOM")
                        .WithMany()
                        .HasForeignKey("FKIIUom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterSource")
                        .WithMany()
                        .HasForeignKey("FKSource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterSubType")
                        .WithMany()
                        .HasForeignKey("FKSubType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterType")
                        .WithMany()
                        .HasForeignKey("FKType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterUOM")
                        .WithMany()
                        .HasForeignKey("FKUom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterBrand");

                    b.Navigation("LookUpMasterCategory");

                    b.Navigation("LookUpMasterIIUOM");

                    b.Navigation("LookUpMasterSource");

                    b.Navigation("LookUpMasterSubType");

                    b.Navigation("LookUpMasterType");

                    b.Navigation("LookUpMasterUOM");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.OfferDetails", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterAnniverseryInfo")
                        .WithMany()
                        .HasForeignKey("FKAnniverseryInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.Offers", "Offers")
                        .WithMany()
                        .HasForeignKey("FKOffer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterAnniverseryInfo");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.PartyInfo", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterArea")
                        .WithMany()
                        .HasForeignKey("FKArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCategory")
                        .WithMany()
                        .HasForeignKey("FKCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCity")
                        .WithMany()
                        .HasForeignKey("FKCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCountry")
                        .WithMany()
                        .HasForeignKey("FKCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterPincode")
                        .WithMany()
                        .HasForeignKey("FKPincode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterState")
                        .WithMany()
                        .HasForeignKey("FKState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterArea");

                    b.Navigation("LookUpMasterCategory");

                    b.Navigation("LookUpMasterCity");

                    b.Navigation("LookUpMasterCountry");

                    b.Navigation("LookUpMasterPincode");

                    b.Navigation("LookUpMasterState");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.PartyInfoDtls", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterArea")
                        .WithMany()
                        .HasForeignKey("FKArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCity")
                        .WithMany()
                        .HasForeignKey("FKCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCountry")
                        .WithMany()
                        .HasForeignKey("FKCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.PartyInfo", "PartyInfo")
                        .WithMany()
                        .HasForeignKey("FKPartyInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterPincode")
                        .WithMany()
                        .HasForeignKey("FKPincode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterState")
                        .WithMany()
                        .HasForeignKey("FKState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterUnitType")
                        .WithMany()
                        .HasForeignKey("FKUnitType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpMasterArea");

                    b.Navigation("LookUpMasterCity");

                    b.Navigation("LookUpMasterCountry");

                    b.Navigation("LookUpMasterPincode");

                    b.Navigation("LookUpMasterState");

                    b.Navigation("LookUpMasterUnitType");

                    b.Navigation("PartyInfo");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.SizeMaster", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpSizeCategory")
                        .WithMany()
                        .HasForeignKey("FKSizeCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpSizeFor")
                        .WithMany()
                        .HasForeignKey("FKSizeFor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpSizeCategory");

                    b.Navigation("LookUpSizeFor");
                });

            modelBuilder.Entity("OptimizerBeta3.Models.MasterTables.UnitMaster", b =>
                {
                    b.HasOne("OptimizerBeta3.Models.MasterTables.CompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoId");

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterArea")
                        .WithMany()
                        .HasForeignKey("FKArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterCity")
                        .WithMany()
                        .HasForeignKey("FKCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterPincode")
                        .WithMany()
                        .HasForeignKey("FKPincode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterState")
                        .WithMany()
                        .HasForeignKey("FKState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimizerBeta3.Models.MasterTables.LookUpMaster", "LookUpMasterUnitType")
                        .WithMany()
                        .HasForeignKey("FKUnitType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfo");

                    b.Navigation("LookUpMasterArea");

                    b.Navigation("LookUpMasterCity");

                    b.Navigation("LookUpMasterPincode");

                    b.Navigation("LookUpMasterState");

                    b.Navigation("LookUpMasterUnitType");
                });
#pragma warning restore 612, 618
        }
    }
}
